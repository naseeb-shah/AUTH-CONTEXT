{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@jridgewell/set-array'), require('@jridgewell/sourcemap-codec')) : typeof define === 'function' && define.amd ? define(['exports', '@jridgewell/set-array', '@jridgewell/sourcemap-codec'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.genMapping = {}, global.setArray, global.sourcemapCodec));\n})(this, function (exports, setArray, sourcemapCodec) {\n  'use strict';\n  /**\n   * A low-level API to associate a generated position with an original source position. Line and\n   * column here are 0-based, unlike `addMapping`.\n   */\n\n  exports.addSegment = void 0;\n  /**\n   * A high-level API to associate a generated position with an original source position. Line is\n   * 1-based, but column is 0-based, due to legacy behavior in `source-map` library.\n   */\n\n  exports.addMapping = void 0;\n  /**\n   * Adds/removes the content of the source file to the source map.\n   */\n\n  exports.setSourceContent = void 0;\n  /**\n   * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n   * a sourcemap, or to JSON.stringify.\n   */\n\n  exports.decodedMap = void 0;\n  /**\n   * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n   * a sourcemap, or to JSON.stringify.\n   */\n\n  exports.encodedMap = void 0;\n  /**\n   * Returns an array of high-level mapping objects for every recorded segment, which could then be\n   * passed to the `source-map` library.\n   */\n\n  exports.allMappings = void 0;\n  /**\n   * Provides the state to generate a sourcemap.\n   */\n\n  class GenMapping {\n    constructor() {\n      let {\n        file,\n        sourceRoot\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this._names = new setArray.SetArray();\n      this._sources = new setArray.SetArray();\n      this._sourcesContent = [];\n      this._mappings = [];\n      this.file = file;\n      this.sourceRoot = sourceRoot;\n    }\n\n  }\n\n  (() => {\n    exports.addSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name) => {\n      const {\n        _mappings: mappings,\n        _sources: sources,\n        _sourcesContent: sourcesContent,\n        _names: names\n      } = map;\n      const line = getLine(mappings, genLine);\n\n      if (source == null) {\n        const seg = [genColumn];\n        const index = getColumnIndex(line, genColumn, seg);\n        return insert(line, index, seg);\n      }\n\n      const sourcesIndex = setArray.put(sources, source);\n      const seg = name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, setArray.put(names, name)] : [genColumn, sourcesIndex, sourceLine, sourceColumn];\n      const index = getColumnIndex(line, genColumn, seg);\n      if (sourcesIndex === sourcesContent.length) sourcesContent[sourcesIndex] = null;\n      insert(line, index, seg);\n    };\n\n    exports.addMapping = (map, mapping) => {\n      const {\n        generated,\n        source,\n        original,\n        name\n      } = mapping;\n      return exports.addSegment(map, generated.line - 1, generated.column, source, original == null ? undefined : original.line - 1, original === null || original === void 0 ? void 0 : original.column, name);\n    };\n\n    exports.setSourceContent = (map, source, content) => {\n      const {\n        _sources: sources,\n        _sourcesContent: sourcesContent\n      } = map;\n      sourcesContent[setArray.put(sources, source)] = content;\n    };\n\n    exports.decodedMap = map => {\n      const {\n        file,\n        sourceRoot,\n        _mappings: mappings,\n        _sources: sources,\n        _sourcesContent: sourcesContent,\n        _names: names\n      } = map;\n      return {\n        version: 3,\n        file,\n        names: names.array,\n        sourceRoot: sourceRoot || undefined,\n        sources: sources.array,\n        sourcesContent,\n        mappings\n      };\n    };\n\n    exports.encodedMap = map => {\n      const decoded = exports.decodedMap(map);\n      return Object.assign(Object.assign({}, decoded), {\n        mappings: sourcemapCodec.encode(decoded.mappings)\n      });\n    };\n\n    exports.allMappings = map => {\n      const out = [];\n      const {\n        _mappings: mappings,\n        _sources: sources,\n        _names: names\n      } = map;\n\n      for (let i = 0; i < mappings.length; i++) {\n        const line = mappings[i];\n\n        for (let j = 0; j < line.length; j++) {\n          const seg = line[j];\n          const generated = {\n            line: i + 1,\n            column: seg[0]\n          };\n          let source = undefined;\n          let original = undefined;\n          let name = undefined;\n\n          if (seg.length !== 1) {\n            source = sources.array[seg[1]];\n            original = {\n              line: seg[2] + 1,\n              column: seg[3]\n            };\n            if (seg.length === 5) name = names.array[seg[4]];\n          }\n\n          out.push({\n            generated,\n            source,\n            original,\n            name\n          });\n        }\n      }\n\n      return out;\n    };\n  })();\n\n  function getLine(mappings, index) {\n    for (let i = mappings.length; i <= index; i++) {\n      mappings[i] = [];\n    }\n\n    return mappings[index];\n  }\n\n  function getColumnIndex(line, column, seg) {\n    let index = line.length;\n\n    for (let i = index - 1; i >= 0; i--, index--) {\n      const current = line[i];\n      const col = current[0];\n      if (col > column) continue;\n      if (col < column) break;\n      const cmp = compare(current, seg);\n      if (cmp === 0) return index;\n      if (cmp < 0) break;\n    }\n\n    return index;\n  }\n\n  function compare(a, b) {\n    let cmp = compareNum(a.length, b.length);\n    if (cmp !== 0) return cmp; // We've already checked genColumn\n\n    if (a.length === 1) return 0;\n    cmp = compareNum(a[1], b[1]);\n    if (cmp !== 0) return cmp;\n    cmp = compareNum(a[2], b[2]);\n    if (cmp !== 0) return cmp;\n    cmp = compareNum(a[3], b[3]);\n    if (cmp !== 0) return cmp;\n    if (a.length === 4) return 0;\n    return compareNum(a[4], b[4]);\n  }\n\n  function compareNum(a, b) {\n    return a - b;\n  }\n\n  function insert(array, index, value) {\n    if (index === -1) return;\n\n    for (let i = array.length; i > index; i--) {\n      array[i] = array[i - 1];\n    }\n\n    array[index] = value;\n  }\n\n  exports.GenMapping = GenMapping;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"mappings":"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","names":["addSegment","addMapping","setSourceContent","decodedMap","encodedMap","allMappings","GenMapping","constructor","file","sourceRoot","SetArray","_sourcesContent","_mappings","map","genLine","genColumn","source","sourceLine","sourceColumn","name","mappings","_sources","sources","sourcesContent","_names","names","line","getLine","seg","index","getColumnIndex","insert","sourcesIndex","put","length","mapping","generated","original","column","undefined","content","version","array","decoded","Object","encode","out","i","j","push","current","col","cmp","compare","a","b","compareNum","value"],"sources":["C:\\Users\\arrow\\Desktop\\Software Topics\\React.js\\ui\\node_modules\\@jridgewell\\src\\gen-mapping.ts"],"sourcesContent":["import { SetArray, put } from '@jridgewell/set-array';\nimport { encode } from '@jridgewell/sourcemap-codec';\n\nimport type { SourceMapSegment } from './sourcemap-segment';\nimport type { DecodedSourceMap, EncodedSourceMap, Pos, Mapping } from './types';\n\nexport type { DecodedSourceMap, EncodedSourceMap, Mapping };\n\nexport type Options = {\n  file?: string | null;\n  sourceRoot?: string | null;\n};\n\n/**\n * A low-level API to associate a generated position with an original source position. Line and\n * column here are 0-based, unlike `addMapping`.\n */\nexport let addSegment: {\n  (\n    map: GenMapping,\n    genLine: number,\n    genColumn: number,\n    source?: null,\n    sourceLine?: null,\n    sourceColumn?: null,\n    name?: null,\n  ): void;\n  (\n    map: GenMapping,\n    genLine: number,\n    genColumn: number,\n    source: string,\n    sourceLine: number,\n    sourceColumn: number,\n    name?: null,\n  ): void;\n  (\n    map: GenMapping,\n    genLine: number,\n    genColumn: number,\n    source: string,\n    sourceLine: number,\n    sourceColumn: number,\n    name: string,\n  ): void;\n};\n\n/**\n * A high-level API to associate a generated position with an original source position. Line is\n * 1-based, but column is 0-based, due to legacy behavior in `source-map` library.\n */\nexport let addMapping: {\n  (\n    map: GenMapping,\n    mapping: {\n      generated: Pos;\n      source?: null;\n      original?: null;\n      name?: null;\n    },\n  ): void;\n  (\n    map: GenMapping,\n    mapping: {\n      generated: Pos;\n      source: string;\n      original: Pos;\n      name?: null;\n    },\n  ): void;\n  (\n    map: GenMapping,\n    mapping: {\n      generated: Pos;\n      source: string;\n      original: Pos;\n      name: string;\n    },\n  ): void;\n};\n\n/**\n * Adds/removes the content of the source file to the source map.\n */\nexport let setSourceContent: (map: GenMapping, source: string, content: string | null) => void;\n\n/**\n * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport let decodedMap: (map: GenMapping) => DecodedSourceMap;\n\n/**\n * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport let encodedMap: (map: GenMapping) => EncodedSourceMap;\n\n/**\n * Returns an array of high-level mapping objects for every recorded segment, which could then be\n * passed to the `source-map` library.\n */\nexport let allMappings: (map: GenMapping) => Mapping[];\n\n/**\n * Provides the state to generate a sourcemap.\n */\nexport class GenMapping {\n  private _names = new SetArray();\n  private _sources = new SetArray();\n  private _sourcesContent: (string | null)[] = [];\n  private _mappings: SourceMapSegment[][] = [];\n  declare file: string | null | undefined;\n  declare sourceRoot: string | null | undefined;\n\n  constructor({ file, sourceRoot }: Options = {}) {\n    this.file = file;\n    this.sourceRoot = sourceRoot;\n  }\n\n  static {\n    addSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name) => {\n      const {\n        _mappings: mappings,\n        _sources: sources,\n        _sourcesContent: sourcesContent,\n        _names: names,\n      } = map;\n\n      const line = getLine(mappings, genLine);\n      if (source == null) {\n        const seg: SourceMapSegment = [genColumn];\n        const index = getColumnIndex(line, genColumn, seg);\n        return insert(line, index, seg);\n      }\n\n      // Sigh, TypeScript can't figure out sourceLine and sourceColumn aren't nullish if source\n      // isn't nullish.\n      assert<number>(sourceLine);\n      assert<number>(sourceColumn);\n      const sourcesIndex = put(sources, source);\n      const seg: SourceMapSegment = name\n        ? [genColumn, sourcesIndex, sourceLine, sourceColumn, put(names, name)]\n        : [genColumn, sourcesIndex, sourceLine, sourceColumn];\n\n      const index = getColumnIndex(line, genColumn, seg);\n      if (sourcesIndex === sourcesContent.length) sourcesContent[sourcesIndex] = null;\n      insert(line, index, seg);\n    };\n\n    addMapping = (map, mapping) => {\n      const { generated, source, original, name } = mapping;\n      return (addSegment as any)(\n        map,\n        generated.line - 1,\n        generated.column,\n        source,\n        original == null ? undefined : original.line - 1,\n        original?.column,\n        name,\n      );\n    };\n\n    setSourceContent = (map, source, content) => {\n      const { _sources: sources, _sourcesContent: sourcesContent } = map;\n      sourcesContent[put(sources, source)] = content;\n    };\n\n    decodedMap = (map) => {\n      const {\n        file,\n        sourceRoot,\n        _mappings: mappings,\n        _sources: sources,\n        _sourcesContent: sourcesContent,\n        _names: names,\n      } = map;\n\n      return {\n        version: 3,\n        file,\n        names: names.array,\n        sourceRoot: sourceRoot || undefined,\n        sources: sources.array,\n        sourcesContent,\n        mappings,\n      };\n    };\n\n    encodedMap = (map) => {\n      const decoded = decodedMap(map);\n      return {\n        ...decoded,\n        mappings: encode(decoded.mappings as SourceMapSegment[][]),\n      };\n    };\n\n    allMappings = (map) => {\n      const out: Mapping[] = [];\n      const { _mappings: mappings, _sources: sources, _names: names } = map;\n\n      for (let i = 0; i < mappings.length; i++) {\n        const line = mappings[i];\n        for (let j = 0; j < line.length; j++) {\n          const seg = line[j];\n\n          const generated = { line: i + 1, column: seg[0] };\n          let source: string | undefined = undefined;\n          let original: Pos | undefined = undefined;\n          let name: string | undefined = undefined;\n\n          if (seg.length !== 1) {\n            source = sources.array[seg[1]];\n            original = { line: seg[2] + 1, column: seg[3] };\n\n            if (seg.length === 5) name = names.array[seg[4]];\n          }\n\n          out.push({ generated, source, original, name } as Mapping);\n        }\n      }\n\n      return out;\n    };\n  }\n}\n\nfunction assert<T>(_val: unknown): asserts _val is T {\n  // noop.\n}\n\nfunction getLine(mappings: SourceMapSegment[][], index: number): SourceMapSegment[] {\n  for (let i = mappings.length; i <= index; i++) {\n    mappings[i] = [];\n  }\n  return mappings[index];\n}\n\nfunction getColumnIndex(line: SourceMapSegment[], column: number, seg: SourceMapSegment): number {\n  let index = line.length;\n  for (let i = index - 1; i >= 0; i--, index--) {\n    const current = line[i];\n    const col = current[0];\n    if (col > column) continue;\n    if (col < column) break;\n\n    const cmp = compare(current, seg);\n    if (cmp === 0) return index;\n    if (cmp < 0) break;\n  }\n  return index;\n}\n\nfunction compare(a: SourceMapSegment, b: SourceMapSegment): number {\n  let cmp = compareNum(a.length, b.length);\n  if (cmp !== 0) return cmp;\n\n  // We've already checked genColumn\n  if (a.length === 1) return 0;\n\n  cmp = compareNum(a[1], b[1]!);\n  if (cmp !== 0) return cmp;\n  cmp = compareNum(a[2], b[2]!);\n  if (cmp !== 0) return cmp;\n  cmp = compareNum(a[3], b[3]!);\n  if (cmp !== 0) return cmp;\n\n  if (a.length === 4) return 0;\n  return compareNum(a[4], b[4]!);\n}\n\nfunction compareNum(a: number, b: number): number {\n  return a - b;\n}\n\nfunction insert<T>(array: T[], index: number, value: T) {\n  if (index === -1) return;\n  for (let i = array.length; i > index; i--) {\n    array[i] = array[i - 1];\n  }\n  array[index] = value;\n}\n"]},"metadata":{},"sourceType":"script"}