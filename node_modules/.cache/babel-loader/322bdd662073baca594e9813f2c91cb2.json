{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BreakStatement = void 0;\nexports.CatchClause = CatchClause;\nexports.ContinueStatement = void 0;\nexports.DebuggerStatement = DebuggerStatement;\nexports.DoWhileStatement = DoWhileStatement;\nexports.ForOfStatement = exports.ForInStatement = void 0;\nexports.ForStatement = ForStatement;\nexports.IfStatement = IfStatement;\nexports.LabeledStatement = LabeledStatement;\nexports.ReturnStatement = void 0;\nexports.SwitchCase = SwitchCase;\nexports.SwitchStatement = SwitchStatement;\nexports.ThrowStatement = void 0;\nexports.TryStatement = TryStatement;\nexports.VariableDeclaration = VariableDeclaration;\nexports.VariableDeclarator = VariableDeclarator;\nexports.WhileStatement = WhileStatement;\nexports.WithStatement = WithStatement;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  isFor,\n  isForStatement,\n  isIfStatement,\n  isStatement\n} = _t;\n\nfunction WithStatement(node) {\n  this.word(\"with\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.object, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction IfStatement(node) {\n  this.word(\"if\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.space();\n  const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));\n\n  if (needsBlock) {\n    this.token(\"{\");\n    this.newline();\n    this.indent();\n  }\n\n  this.printAndIndentOnComments(node.consequent, node);\n\n  if (needsBlock) {\n    this.dedent();\n    this.newline();\n    this.token(\"}\");\n  }\n\n  if (node.alternate) {\n    if (this.endsWith(125)) this.space();\n    this.word(\"else\");\n    this.space();\n    this.printAndIndentOnComments(node.alternate, node);\n  }\n}\n\nfunction getLastStatement(statement) {\n  if (!isStatement(statement.body)) return statement;\n  return getLastStatement(statement.body);\n}\n\nfunction ForStatement(node) {\n  this.word(\"for\");\n  this.space();\n  this.token(\"(\");\n  this.inForStatementInitCounter++;\n  this.print(node.init, node);\n  this.inForStatementInitCounter--;\n  this.token(\";\");\n\n  if (node.test) {\n    this.space();\n    this.print(node.test, node);\n  }\n\n  this.token(\";\");\n\n  if (node.update) {\n    this.space();\n    this.print(node.update, node);\n  }\n\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction WhileStatement(node) {\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nconst buildForXStatement = function (op) {\n  return function (node) {\n    this.word(\"for\");\n    this.space();\n\n    if (op === \"of\" && node.await) {\n      this.word(\"await\");\n      this.space();\n    }\n\n    this.token(\"(\");\n    this.print(node.left, node);\n    this.space();\n    this.word(op);\n    this.space();\n    this.print(node.right, node);\n    this.token(\")\");\n    this.printBlock(node);\n  };\n};\n\nconst ForInStatement = buildForXStatement(\"in\");\nexports.ForInStatement = ForInStatement;\nconst ForOfStatement = buildForXStatement(\"of\");\nexports.ForOfStatement = ForOfStatement;\n\nfunction DoWhileStatement(node) {\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n  this.space();\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.semicolon();\n}\n\nfunction buildLabelStatement(prefix) {\n  let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"label\";\n  return function (node) {\n    this.word(prefix);\n    const label = node[key];\n\n    if (label) {\n      this.space();\n      const isLabel = key == \"label\";\n      const terminatorState = this.startTerminatorless(isLabel);\n      this.print(label, node);\n      this.endTerminatorless(terminatorState);\n    }\n\n    this.semicolon();\n  };\n}\n\nconst ContinueStatement = buildLabelStatement(\"continue\");\nexports.ContinueStatement = ContinueStatement;\nconst ReturnStatement = buildLabelStatement(\"return\", \"argument\");\nexports.ReturnStatement = ReturnStatement;\nconst BreakStatement = buildLabelStatement(\"break\");\nexports.BreakStatement = BreakStatement;\nconst ThrowStatement = buildLabelStatement(\"throw\", \"argument\");\nexports.ThrowStatement = ThrowStatement;\n\nfunction LabeledStatement(node) {\n  this.print(node.label, node);\n  this.token(\":\");\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction TryStatement(node) {\n  this.word(\"try\");\n  this.space();\n  this.print(node.block, node);\n  this.space();\n\n  if (node.handlers) {\n    this.print(node.handlers[0], node);\n  } else {\n    this.print(node.handler, node);\n  }\n\n  if (node.finalizer) {\n    this.space();\n    this.word(\"finally\");\n    this.space();\n    this.print(node.finalizer, node);\n  }\n}\n\nfunction CatchClause(node) {\n  this.word(\"catch\");\n  this.space();\n\n  if (node.param) {\n    this.token(\"(\");\n    this.print(node.param, node);\n    this.print(node.param.typeAnnotation, node);\n    this.token(\")\");\n    this.space();\n  }\n\n  this.print(node.body, node);\n}\n\nfunction SwitchStatement(node) {\n  this.word(\"switch\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.discriminant, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"{\");\n  this.printSequence(node.cases, node, {\n    indent: true,\n\n    addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    }\n\n  });\n  this.token(\"}\");\n}\n\nfunction SwitchCase(node) {\n  if (node.test) {\n    this.word(\"case\");\n    this.space();\n    this.print(node.test, node);\n    this.token(\":\");\n  } else {\n    this.word(\"default\");\n    this.token(\":\");\n  }\n\n  if (node.consequent.length) {\n    this.newline();\n    this.printSequence(node.consequent, node, {\n      indent: true\n    });\n  }\n}\n\nfunction DebuggerStatement() {\n  this.word(\"debugger\");\n  this.semicolon();\n}\n\nfunction variableDeclarationIndent() {\n  this.token(\",\");\n  this.newline();\n\n  if (this.endsWith(10)) {\n    for (let i = 0; i < 4; i++) this.space(true);\n  }\n}\n\nfunction constDeclarationIndent() {\n  this.token(\",\");\n  this.newline();\n\n  if (this.endsWith(10)) {\n    for (let i = 0; i < 6; i++) this.space(true);\n  }\n}\n\nfunction VariableDeclaration(node, parent) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(node.kind);\n  this.space();\n  let hasInits = false;\n\n  if (!isFor(parent)) {\n    for (const declar of node.declarations) {\n      if (declar.init) {\n        hasInits = true;\n      }\n    }\n  }\n\n  let separator;\n\n  if (hasInits) {\n    separator = node.kind === \"const\" ? constDeclarationIndent : variableDeclarationIndent;\n  }\n\n  this.printList(node.declarations, node, {\n    separator\n  });\n\n  if (isFor(parent)) {\n    if (isForStatement(parent)) {\n      if (parent.init === node) return;\n    } else {\n      if (parent.left === node) return;\n    }\n  }\n\n  this.semicolon();\n}\n\nfunction VariableDeclarator(node) {\n  this.print(node.id, node);\n  if (node.definite) this.token(\"!\");\n  this.print(node.id.typeAnnotation, node);\n\n  if (node.init) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.init, node);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","BreakStatement","CatchClause","ContinueStatement","DebuggerStatement","DoWhileStatement","ForOfStatement","ForInStatement","ForStatement","IfStatement","LabeledStatement","ReturnStatement","SwitchCase","SwitchStatement","ThrowStatement","TryStatement","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","_t","require","isFor","isForStatement","isIfStatement","isStatement","node","word","space","token","print","object","printBlock","test","needsBlock","alternate","getLastStatement","consequent","newline","indent","printAndIndentOnComments","dedent","endsWith","statement","body","inForStatementInitCounter","init","update","buildForXStatement","op","await","left","right","semicolon","buildLabelStatement","prefix","key","label","isLabel","terminatorState","startTerminatorless","endTerminatorless","block","handlers","handler","finalizer","param","typeAnnotation","discriminant","printSequence","cases","addNewlines","leading","cas","length","variableDeclarationIndent","i","constDeclarationIndent","parent","declare","kind","hasInits","declar","declarations","separator","printList","id","definite"],"sources":["C:/Users/arrow/Desktop/Software Topics/React.js/ui/node_modules/@babel/generator/lib/generators/statements.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BreakStatement = void 0;\nexports.CatchClause = CatchClause;\nexports.ContinueStatement = void 0;\nexports.DebuggerStatement = DebuggerStatement;\nexports.DoWhileStatement = DoWhileStatement;\nexports.ForOfStatement = exports.ForInStatement = void 0;\nexports.ForStatement = ForStatement;\nexports.IfStatement = IfStatement;\nexports.LabeledStatement = LabeledStatement;\nexports.ReturnStatement = void 0;\nexports.SwitchCase = SwitchCase;\nexports.SwitchStatement = SwitchStatement;\nexports.ThrowStatement = void 0;\nexports.TryStatement = TryStatement;\nexports.VariableDeclaration = VariableDeclaration;\nexports.VariableDeclarator = VariableDeclarator;\nexports.WhileStatement = WhileStatement;\nexports.WithStatement = WithStatement;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  isFor,\n  isForStatement,\n  isIfStatement,\n  isStatement\n} = _t;\n\nfunction WithStatement(node) {\n  this.word(\"with\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.object, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction IfStatement(node) {\n  this.word(\"if\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.space();\n  const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));\n\n  if (needsBlock) {\n    this.token(\"{\");\n    this.newline();\n    this.indent();\n  }\n\n  this.printAndIndentOnComments(node.consequent, node);\n\n  if (needsBlock) {\n    this.dedent();\n    this.newline();\n    this.token(\"}\");\n  }\n\n  if (node.alternate) {\n    if (this.endsWith(125)) this.space();\n    this.word(\"else\");\n    this.space();\n    this.printAndIndentOnComments(node.alternate, node);\n  }\n}\n\nfunction getLastStatement(statement) {\n  if (!isStatement(statement.body)) return statement;\n  return getLastStatement(statement.body);\n}\n\nfunction ForStatement(node) {\n  this.word(\"for\");\n  this.space();\n  this.token(\"(\");\n  this.inForStatementInitCounter++;\n  this.print(node.init, node);\n  this.inForStatementInitCounter--;\n  this.token(\";\");\n\n  if (node.test) {\n    this.space();\n    this.print(node.test, node);\n  }\n\n  this.token(\";\");\n\n  if (node.update) {\n    this.space();\n    this.print(node.update, node);\n  }\n\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction WhileStatement(node) {\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nconst buildForXStatement = function (op) {\n  return function (node) {\n    this.word(\"for\");\n    this.space();\n\n    if (op === \"of\" && node.await) {\n      this.word(\"await\");\n      this.space();\n    }\n\n    this.token(\"(\");\n    this.print(node.left, node);\n    this.space();\n    this.word(op);\n    this.space();\n    this.print(node.right, node);\n    this.token(\")\");\n    this.printBlock(node);\n  };\n};\n\nconst ForInStatement = buildForXStatement(\"in\");\nexports.ForInStatement = ForInStatement;\nconst ForOfStatement = buildForXStatement(\"of\");\nexports.ForOfStatement = ForOfStatement;\n\nfunction DoWhileStatement(node) {\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n  this.space();\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.semicolon();\n}\n\nfunction buildLabelStatement(prefix, key = \"label\") {\n  return function (node) {\n    this.word(prefix);\n    const label = node[key];\n\n    if (label) {\n      this.space();\n      const isLabel = key == \"label\";\n      const terminatorState = this.startTerminatorless(isLabel);\n      this.print(label, node);\n      this.endTerminatorless(terminatorState);\n    }\n\n    this.semicolon();\n  };\n}\n\nconst ContinueStatement = buildLabelStatement(\"continue\");\nexports.ContinueStatement = ContinueStatement;\nconst ReturnStatement = buildLabelStatement(\"return\", \"argument\");\nexports.ReturnStatement = ReturnStatement;\nconst BreakStatement = buildLabelStatement(\"break\");\nexports.BreakStatement = BreakStatement;\nconst ThrowStatement = buildLabelStatement(\"throw\", \"argument\");\nexports.ThrowStatement = ThrowStatement;\n\nfunction LabeledStatement(node) {\n  this.print(node.label, node);\n  this.token(\":\");\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction TryStatement(node) {\n  this.word(\"try\");\n  this.space();\n  this.print(node.block, node);\n  this.space();\n\n  if (node.handlers) {\n    this.print(node.handlers[0], node);\n  } else {\n    this.print(node.handler, node);\n  }\n\n  if (node.finalizer) {\n    this.space();\n    this.word(\"finally\");\n    this.space();\n    this.print(node.finalizer, node);\n  }\n}\n\nfunction CatchClause(node) {\n  this.word(\"catch\");\n  this.space();\n\n  if (node.param) {\n    this.token(\"(\");\n    this.print(node.param, node);\n    this.print(node.param.typeAnnotation, node);\n    this.token(\")\");\n    this.space();\n  }\n\n  this.print(node.body, node);\n}\n\nfunction SwitchStatement(node) {\n  this.word(\"switch\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.discriminant, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"{\");\n  this.printSequence(node.cases, node, {\n    indent: true,\n\n    addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    }\n\n  });\n  this.token(\"}\");\n}\n\nfunction SwitchCase(node) {\n  if (node.test) {\n    this.word(\"case\");\n    this.space();\n    this.print(node.test, node);\n    this.token(\":\");\n  } else {\n    this.word(\"default\");\n    this.token(\":\");\n  }\n\n  if (node.consequent.length) {\n    this.newline();\n    this.printSequence(node.consequent, node, {\n      indent: true\n    });\n  }\n}\n\nfunction DebuggerStatement() {\n  this.word(\"debugger\");\n  this.semicolon();\n}\n\nfunction variableDeclarationIndent() {\n  this.token(\",\");\n  this.newline();\n\n  if (this.endsWith(10)) {\n    for (let i = 0; i < 4; i++) this.space(true);\n  }\n}\n\nfunction constDeclarationIndent() {\n  this.token(\",\");\n  this.newline();\n\n  if (this.endsWith(10)) {\n    for (let i = 0; i < 6; i++) this.space(true);\n  }\n}\n\nfunction VariableDeclaration(node, parent) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(node.kind);\n  this.space();\n  let hasInits = false;\n\n  if (!isFor(parent)) {\n    for (const declar of node.declarations) {\n      if (declar.init) {\n        hasInits = true;\n      }\n    }\n  }\n\n  let separator;\n\n  if (hasInits) {\n    separator = node.kind === \"const\" ? constDeclarationIndent : variableDeclarationIndent;\n  }\n\n  this.printList(node.declarations, node, {\n    separator\n  });\n\n  if (isFor(parent)) {\n    if (isForStatement(parent)) {\n      if (parent.init === node) return;\n    } else {\n      if (parent.left === node) return;\n    }\n  }\n\n  this.semicolon();\n}\n\nfunction VariableDeclarator(node) {\n  this.print(node.id, node);\n  if (node.definite) this.token(\"!\");\n  this.print(node.id.typeAnnotation, node);\n\n  if (node.init) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.init, node);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}