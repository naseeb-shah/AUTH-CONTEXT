{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.statements = exports.statement = exports.smart = exports.program = exports.expression = void 0;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  assertExpressionStatement\n} = _t;\n\nfunction makeStatementFormatter(fn) {\n  return {\n    code: str => `/* @babel/template */;\\n${str}`,\n    validate: () => {},\n    unwrap: ast => {\n      return fn(ast.program.body.slice(1));\n    }\n  };\n}\n\nconst smart = makeStatementFormatter(body => {\n  if (body.length > 1) {\n    return body;\n  } else {\n    return body[0];\n  }\n});\nexports.smart = smart;\nconst statements = makeStatementFormatter(body => body);\nexports.statements = statements;\nconst statement = makeStatementFormatter(body => {\n  if (body.length === 0) {\n    throw new Error(\"Found nothing to return.\");\n  }\n\n  if (body.length > 1) {\n    throw new Error(\"Found multiple statements but wanted one\");\n  }\n\n  return body[0];\n});\nexports.statement = statement;\nconst expression = {\n  code: str => `(\\n${str}\\n)`,\n  validate: ast => {\n    if (ast.program.body.length > 1) {\n      throw new Error(\"Found multiple statements but wanted one\");\n    }\n\n    if (expression.unwrap(ast).start === 0) {\n      throw new Error(\"Parse result included parens.\");\n    }\n  },\n  unwrap: _ref => {\n    let {\n      program\n    } = _ref;\n    const [stmt] = program.body;\n    assertExpressionStatement(stmt);\n    return stmt.expression;\n  }\n};\nexports.expression = expression;\nconst program = {\n  code: str => str,\n  validate: () => {},\n  unwrap: ast => ast.program\n};\nexports.program = program;","map":{"version":3,"names":["Object","defineProperty","exports","value","statements","statement","smart","program","expression","_t","require","assertExpressionStatement","makeStatementFormatter","fn","code","str","validate","unwrap","ast","body","slice","length","Error","start","stmt"],"sources":["C:/Users/arrow/Desktop/Software Topics/React.js/ui/node_modules/@babel/template/lib/formatters.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.statements = exports.statement = exports.smart = exports.program = exports.expression = void 0;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  assertExpressionStatement\n} = _t;\n\nfunction makeStatementFormatter(fn) {\n  return {\n    code: str => `/* @babel/template */;\\n${str}`,\n    validate: () => {},\n    unwrap: ast => {\n      return fn(ast.program.body.slice(1));\n    }\n  };\n}\n\nconst smart = makeStatementFormatter(body => {\n  if (body.length > 1) {\n    return body;\n  } else {\n    return body[0];\n  }\n});\nexports.smart = smart;\nconst statements = makeStatementFormatter(body => body);\nexports.statements = statements;\nconst statement = makeStatementFormatter(body => {\n  if (body.length === 0) {\n    throw new Error(\"Found nothing to return.\");\n  }\n\n  if (body.length > 1) {\n    throw new Error(\"Found multiple statements but wanted one\");\n  }\n\n  return body[0];\n});\nexports.statement = statement;\nconst expression = {\n  code: str => `(\\n${str}\\n)`,\n  validate: ast => {\n    if (ast.program.body.length > 1) {\n      throw new Error(\"Found multiple statements but wanted one\");\n    }\n\n    if (expression.unwrap(ast).start === 0) {\n      throw new Error(\"Parse result included parens.\");\n    }\n  },\n  unwrap: ({\n    program\n  }) => {\n    const [stmt] = program.body;\n    assertExpressionStatement(stmt);\n    return stmt.expression;\n  }\n};\nexports.expression = expression;\nconst program = {\n  code: str => str,\n  validate: () => {},\n  unwrap: ast => ast.program\n};\nexports.program = program;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,UAAR,GAAqBF,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACI,KAAR,GAAgBJ,OAAO,CAACK,OAAR,GAAkBL,OAAO,CAACM,UAAR,GAAqB,KAAK,CAArG;;AAEA,IAAIC,EAAE,GAAGC,OAAO,CAAC,cAAD,CAAhB;;AAEA,MAAM;EACJC;AADI,IAEFF,EAFJ;;AAIA,SAASG,sBAAT,CAAgCC,EAAhC,EAAoC;EAClC,OAAO;IACLC,IAAI,EAAEC,GAAG,IAAK,2BAA0BA,GAAI,EADvC;IAELC,QAAQ,EAAE,MAAM,CAAE,CAFb;IAGLC,MAAM,EAAEC,GAAG,IAAI;MACb,OAAOL,EAAE,CAACK,GAAG,CAACX,OAAJ,CAAYY,IAAZ,CAAiBC,KAAjB,CAAuB,CAAvB,CAAD,CAAT;IACD;EALI,CAAP;AAOD;;AAED,MAAMd,KAAK,GAAGM,sBAAsB,CAACO,IAAI,IAAI;EAC3C,IAAIA,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;IACnB,OAAOF,IAAP;EACD,CAFD,MAEO;IACL,OAAOA,IAAI,CAAC,CAAD,CAAX;EACD;AACF,CANmC,CAApC;AAOAjB,OAAO,CAACI,KAAR,GAAgBA,KAAhB;AACA,MAAMF,UAAU,GAAGQ,sBAAsB,CAACO,IAAI,IAAIA,IAAT,CAAzC;AACAjB,OAAO,CAACE,UAAR,GAAqBA,UAArB;AACA,MAAMC,SAAS,GAAGO,sBAAsB,CAACO,IAAI,IAAI;EAC/C,IAAIA,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;IACrB,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;EACD;;EAED,IAAIH,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;IACnB,MAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;EACD;;EAED,OAAOH,IAAI,CAAC,CAAD,CAAX;AACD,CAVuC,CAAxC;AAWAjB,OAAO,CAACG,SAAR,GAAoBA,SAApB;AACA,MAAMG,UAAU,GAAG;EACjBM,IAAI,EAAEC,GAAG,IAAK,MAAKA,GAAI,KADN;EAEjBC,QAAQ,EAAEE,GAAG,IAAI;IACf,IAAIA,GAAG,CAACX,OAAJ,CAAYY,IAAZ,CAAiBE,MAAjB,GAA0B,CAA9B,EAAiC;MAC/B,MAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;IACD;;IAED,IAAId,UAAU,CAACS,MAAX,CAAkBC,GAAlB,EAAuBK,KAAvB,KAAiC,CAArC,EAAwC;MACtC,MAAM,IAAID,KAAJ,CAAU,+BAAV,CAAN;IACD;EACF,CAVgB;EAWjBL,MAAM,EAAE,QAEF;IAAA,IAFG;MACPV;IADO,CAEH;IACJ,MAAM,CAACiB,IAAD,IAASjB,OAAO,CAACY,IAAvB;IACAR,yBAAyB,CAACa,IAAD,CAAzB;IACA,OAAOA,IAAI,CAAChB,UAAZ;EACD;AAjBgB,CAAnB;AAmBAN,OAAO,CAACM,UAAR,GAAqBA,UAArB;AACA,MAAMD,OAAO,GAAG;EACdO,IAAI,EAAEC,GAAG,IAAIA,GADC;EAEdC,QAAQ,EAAE,MAAM,CAAE,CAFJ;EAGdC,MAAM,EAAEC,GAAG,IAAIA,GAAG,CAACX;AAHL,CAAhB;AAKAL,OAAO,CAACK,OAAR,GAAkBA,OAAlB"},"metadata":{},"sourceType":"script"}