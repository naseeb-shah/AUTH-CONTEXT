{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;\nexports._resolve = _resolve;\nexports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;\nexports.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;\nexports.equals = equals;\nexports.getSource = getSource;\nexports.has = has;\nexports.is = void 0;\nexports.isCompletionRecord = isCompletionRecord;\nexports.isConstantExpression = isConstantExpression;\nexports.isInStrictMode = isInStrictMode;\nexports.isNodeType = isNodeType;\nexports.isStatementOrBlock = isStatementOrBlock;\nexports.isStatic = isStatic;\nexports.isnt = isnt;\nexports.matchesPattern = matchesPattern;\nexports.referencesImport = referencesImport;\nexports.resolve = resolve;\nexports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  STATEMENT_OR_BLOCK_KEYS,\n  VISITOR_KEYS,\n  isBlockStatement,\n  isExpression,\n  isIdentifier,\n  isLiteral,\n  isStringLiteral,\n  isType,\n  matchesPattern: _matchesPattern\n} = _t;\n\nfunction matchesPattern(pattern, allowPartial) {\n  return _matchesPattern(this.node, pattern, allowPartial);\n}\n\nfunction has(key) {\n  const val = this.node && this.node[key];\n\n  if (val && Array.isArray(val)) {\n    return !!val.length;\n  } else {\n    return !!val;\n  }\n}\n\nfunction isStatic() {\n  return this.scope.isStatic(this.node);\n}\n\nconst is = has;\nexports.is = is;\n\nfunction isnt(key) {\n  return !this.has(key);\n}\n\nfunction equals(key, value) {\n  return this.node[key] === value;\n}\n\nfunction isNodeType(type) {\n  return isType(this.type, type);\n}\n\nfunction canHaveVariableDeclarationOrExpression() {\n  return (this.key === \"init\" || this.key === \"left\") && this.parentPath.isFor();\n}\n\nfunction canSwapBetweenExpressionAndStatement(replacement) {\n  if (this.key !== \"body\" || !this.parentPath.isArrowFunctionExpression()) {\n    return false;\n  }\n\n  if (this.isExpression()) {\n    return isBlockStatement(replacement);\n  } else if (this.isBlockStatement()) {\n    return isExpression(replacement);\n  }\n\n  return false;\n}\n\nfunction isCompletionRecord(allowInsideFunction) {\n  let path = this;\n  let first = true;\n\n  do {\n    const {\n      type,\n      container\n    } = path;\n\n    if (!first && (path.isFunction() || type === \"StaticBlock\")) {\n      return !!allowInsideFunction;\n    }\n\n    first = false;\n\n    if (Array.isArray(container) && path.key !== container.length - 1) {\n      return false;\n    }\n  } while ((path = path.parentPath) && !path.isProgram() && !path.isDoExpression());\n\n  return true;\n}\n\nfunction isStatementOrBlock() {\n  if (this.parentPath.isLabeledStatement() || isBlockStatement(this.container)) {\n    return false;\n  } else {\n    return STATEMENT_OR_BLOCK_KEYS.includes(this.key);\n  }\n}\n\nfunction referencesImport(moduleSource, importName) {\n  if (!this.isReferencedIdentifier()) {\n    if (this.isJSXMemberExpression() && this.node.property.name === importName || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, {\n      value: importName\n    }) : this.node.property.name === importName)) {\n      const object = this.get(\"object\");\n      return object.isReferencedIdentifier() && object.referencesImport(moduleSource, \"*\");\n    }\n\n    return false;\n  }\n\n  const binding = this.scope.getBinding(this.node.name);\n  if (!binding || binding.kind !== \"module\") return false;\n  const path = binding.path;\n  const parent = path.parentPath;\n  if (!parent.isImportDeclaration()) return false;\n\n  if (parent.node.source.value === moduleSource) {\n    if (!importName) return true;\n  } else {\n    return false;\n  }\n\n  if (path.isImportDefaultSpecifier() && importName === \"default\") {\n    return true;\n  }\n\n  if (path.isImportNamespaceSpecifier() && importName === \"*\") {\n    return true;\n  }\n\n  if (path.isImportSpecifier() && isIdentifier(path.node.imported, {\n    name: importName\n  })) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getSource() {\n  const node = this.node;\n\n  if (node.end) {\n    const code = this.hub.getCode();\n    if (code) return code.slice(node.start, node.end);\n  }\n\n  return \"\";\n}\n\nfunction willIMaybeExecuteBefore(target) {\n  return this._guessExecutionStatusRelativeTo(target) !== \"after\";\n}\n\nfunction getOuterFunction(path) {\n  return (path.scope.getFunctionParent() || path.scope.getProgramParent()).path;\n}\n\nfunction isExecutionUncertain(type, key) {\n  switch (type) {\n    case \"LogicalExpression\":\n      return key === \"right\";\n\n    case \"ConditionalExpression\":\n    case \"IfStatement\":\n      return key === \"consequent\" || key === \"alternate\";\n\n    case \"WhileStatement\":\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForOfStatement\":\n      return key === \"body\";\n\n    case \"ForStatement\":\n      return key === \"body\" || key === \"update\";\n\n    case \"SwitchStatement\":\n      return key === \"cases\";\n\n    case \"TryStatement\":\n      return key === \"handler\";\n\n    case \"AssignmentPattern\":\n      return key === \"right\";\n\n    case \"OptionalMemberExpression\":\n      return key === \"property\";\n\n    case \"OptionalCallExpression\":\n      return key === \"arguments\";\n\n    default:\n      return false;\n  }\n}\n\nfunction isExecutionUncertainInList(paths, maxIndex) {\n  for (let i = 0; i < maxIndex; i++) {\n    const path = paths[i];\n\n    if (isExecutionUncertain(path.parent.type, path.parentKey)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction _guessExecutionStatusRelativeTo(target) {\n  return _guessExecutionStatusRelativeToCached(this, target, new Map());\n}\n\nfunction _guessExecutionStatusRelativeToCached(base, target, cache) {\n  const funcParent = {\n    this: getOuterFunction(base),\n    target: getOuterFunction(target)\n  };\n\n  if (funcParent.target.node !== funcParent.this.node) {\n    return _guessExecutionStatusRelativeToDifferentFunctionsCached(base, funcParent.target, cache);\n  }\n\n  const paths = {\n    target: target.getAncestry(),\n    this: base.getAncestry()\n  };\n  if (paths.target.indexOf(base) >= 0) return \"after\";\n  if (paths.this.indexOf(target) >= 0) return \"before\";\n  let commonPath;\n  const commonIndex = {\n    target: 0,\n    this: 0\n  };\n\n  while (!commonPath && commonIndex.this < paths.this.length) {\n    const path = paths.this[commonIndex.this];\n    commonIndex.target = paths.target.indexOf(path);\n\n    if (commonIndex.target >= 0) {\n      commonPath = path;\n    } else {\n      commonIndex.this++;\n    }\n  }\n\n  if (!commonPath) {\n    throw new Error(\"Internal Babel error - The two compared nodes\" + \" don't appear to belong to the same program.\");\n  }\n\n  if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1)) {\n    return \"unknown\";\n  }\n\n  const divergence = {\n    this: paths.this[commonIndex.this - 1],\n    target: paths.target[commonIndex.target - 1]\n  };\n\n  if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container) {\n    return divergence.target.key > divergence.this.key ? \"before\" : \"after\";\n  }\n\n  const keys = VISITOR_KEYS[commonPath.type];\n  const keyPosition = {\n    this: keys.indexOf(divergence.this.parentKey),\n    target: keys.indexOf(divergence.target.parentKey)\n  };\n  return keyPosition.target > keyPosition.this ? \"before\" : \"after\";\n}\n\nconst executionOrderCheckedNodes = new Set();\n\nfunction _guessExecutionStatusRelativeToDifferentFunctionsInternal(base, target, cache) {\n  if (!target.isFunctionDeclaration() || target.parentPath.isExportDeclaration()) {\n    return \"unknown\";\n  }\n\n  const binding = target.scope.getBinding(target.node.id.name);\n  if (!binding.references) return \"before\";\n  const referencePaths = binding.referencePaths;\n  let allStatus;\n\n  for (const path of referencePaths) {\n    const childOfFunction = !!path.find(path => path.node === target.node);\n    if (childOfFunction) continue;\n\n    if (path.key !== \"callee\" || !path.parentPath.isCallExpression()) {\n      return \"unknown\";\n    }\n\n    if (executionOrderCheckedNodes.has(path.node)) continue;\n    executionOrderCheckedNodes.add(path.node);\n\n    try {\n      const status = _guessExecutionStatusRelativeToCached(base, path, cache);\n\n      if (allStatus && allStatus !== status) {\n        return \"unknown\";\n      } else {\n        allStatus = status;\n      }\n    } finally {\n      executionOrderCheckedNodes.delete(path.node);\n    }\n  }\n\n  return allStatus;\n}\n\nfunction _guessExecutionStatusRelativeToDifferentFunctionsCached(base, target, cache) {\n  let nodeMap = cache.get(base.node);\n\n  if (!nodeMap) {\n    cache.set(base.node, nodeMap = new Map());\n  } else if (nodeMap.has(target.node)) {\n    return nodeMap.get(target.node);\n  }\n\n  const result = _guessExecutionStatusRelativeToDifferentFunctionsInternal(base, target, cache);\n\n  nodeMap.set(target.node, result);\n  return result;\n}\n\nfunction resolve(dangerous, resolved) {\n  return this._resolve(dangerous, resolved) || this;\n}\n\nfunction _resolve(dangerous, resolved) {\n  if (resolved && resolved.indexOf(this) >= 0) return;\n  resolved = resolved || [];\n  resolved.push(this);\n\n  if (this.isVariableDeclarator()) {\n    if (this.get(\"id\").isIdentifier()) {\n      return this.get(\"init\").resolve(dangerous, resolved);\n    } else {}\n  } else if (this.isReferencedIdentifier()) {\n    const binding = this.scope.getBinding(this.node.name);\n    if (!binding) return;\n    if (!binding.constant) return;\n    if (binding.kind === \"module\") return;\n\n    if (binding.path !== this) {\n      const ret = binding.path.resolve(dangerous, resolved);\n      if (this.find(parent => parent.node === ret.node)) return;\n      return ret;\n    }\n  } else if (this.isTypeCastExpression()) {\n    return this.get(\"expression\").resolve(dangerous, resolved);\n  } else if (dangerous && this.isMemberExpression()) {\n    const targetKey = this.toComputedKey();\n    if (!isLiteral(targetKey)) return;\n    const targetName = targetKey.value;\n    const target = this.get(\"object\").resolve(dangerous, resolved);\n\n    if (target.isObjectExpression()) {\n      const props = target.get(\"properties\");\n\n      for (const prop of props) {\n        if (!prop.isProperty()) continue;\n        const key = prop.get(\"key\");\n        let match = prop.isnt(\"computed\") && key.isIdentifier({\n          name: targetName\n        });\n        match = match || key.isLiteral({\n          value: targetName\n        });\n        if (match) return prop.get(\"value\").resolve(dangerous, resolved);\n      }\n    } else if (target.isArrayExpression() && !isNaN(+targetName)) {\n      const elems = target.get(\"elements\");\n      const elem = elems[targetName];\n      if (elem) return elem.resolve(dangerous, resolved);\n    }\n  }\n}\n\nfunction isConstantExpression() {\n  if (this.isIdentifier()) {\n    const binding = this.scope.getBinding(this.node.name);\n    if (!binding) return false;\n    return binding.constant;\n  }\n\n  if (this.isLiteral()) {\n    if (this.isRegExpLiteral()) {\n      return false;\n    }\n\n    if (this.isTemplateLiteral()) {\n      return this.get(\"expressions\").every(expression => expression.isConstantExpression());\n    }\n\n    return true;\n  }\n\n  if (this.isUnaryExpression()) {\n    if (this.node.operator !== \"void\") {\n      return false;\n    }\n\n    return this.get(\"argument\").isConstantExpression();\n  }\n\n  if (this.isBinaryExpression()) {\n    return this.get(\"left\").isConstantExpression() && this.get(\"right\").isConstantExpression();\n  }\n\n  return false;\n}\n\nfunction isInStrictMode() {\n  const start = this.isProgram() ? this : this.parentPath;\n  const strictParent = start.find(path => {\n    if (path.isProgram({\n      sourceType: \"module\"\n    })) return true;\n    if (path.isClass()) return true;\n    if (!path.isProgram() && !path.isFunction()) return false;\n\n    if (path.isArrowFunctionExpression() && !path.get(\"body\").isBlockStatement()) {\n      return false;\n    }\n\n    const body = path.isFunction() ? path.node.body : path.node;\n\n    for (const directive of body.directives) {\n      if (directive.value.value === \"use strict\") {\n        return true;\n      }\n    }\n  });\n  return !!strictParent;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_guessExecutionStatusRelativeTo","_resolve","canHaveVariableDeclarationOrExpression","canSwapBetweenExpressionAndStatement","equals","getSource","has","is","isCompletionRecord","isConstantExpression","isInStrictMode","isNodeType","isStatementOrBlock","isStatic","isnt","matchesPattern","referencesImport","resolve","willIMaybeExecuteBefore","_t","require","STATEMENT_OR_BLOCK_KEYS","VISITOR_KEYS","isBlockStatement","isExpression","isIdentifier","isLiteral","isStringLiteral","isType","_matchesPattern","pattern","allowPartial","node","key","val","Array","isArray","length","scope","type","parentPath","isFor","replacement","isArrowFunctionExpression","allowInsideFunction","path","first","container","isFunction","isProgram","isDoExpression","isLabeledStatement","includes","moduleSource","importName","isReferencedIdentifier","isJSXMemberExpression","property","name","isMemberExpression","isOptionalMemberExpression","computed","object","get","binding","getBinding","kind","parent","isImportDeclaration","source","isImportDefaultSpecifier","isImportNamespaceSpecifier","isImportSpecifier","imported","end","code","hub","getCode","slice","start","target","getOuterFunction","getFunctionParent","getProgramParent","isExecutionUncertain","isExecutionUncertainInList","paths","maxIndex","i","parentKey","_guessExecutionStatusRelativeToCached","Map","base","cache","funcParent","this","_guessExecutionStatusRelativeToDifferentFunctionsCached","getAncestry","indexOf","commonPath","commonIndex","Error","divergence","listKey","keys","keyPosition","executionOrderCheckedNodes","Set","_guessExecutionStatusRelativeToDifferentFunctionsInternal","isFunctionDeclaration","isExportDeclaration","id","references","referencePaths","allStatus","childOfFunction","find","isCallExpression","add","status","delete","nodeMap","set","result","dangerous","resolved","push","isVariableDeclarator","constant","ret","isTypeCastExpression","targetKey","toComputedKey","targetName","isObjectExpression","props","prop","isProperty","match","isArrayExpression","isNaN","elems","elem","isRegExpLiteral","isTemplateLiteral","every","expression","isUnaryExpression","operator","isBinaryExpression","strictParent","sourceType","isClass","body","directive","directives"],"sources":["C:/Users/arrow/Desktop/Software Topics/React.js/ui/node_modules/@babel/traverse/lib/path/introspection.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;\nexports._resolve = _resolve;\nexports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;\nexports.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;\nexports.equals = equals;\nexports.getSource = getSource;\nexports.has = has;\nexports.is = void 0;\nexports.isCompletionRecord = isCompletionRecord;\nexports.isConstantExpression = isConstantExpression;\nexports.isInStrictMode = isInStrictMode;\nexports.isNodeType = isNodeType;\nexports.isStatementOrBlock = isStatementOrBlock;\nexports.isStatic = isStatic;\nexports.isnt = isnt;\nexports.matchesPattern = matchesPattern;\nexports.referencesImport = referencesImport;\nexports.resolve = resolve;\nexports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  STATEMENT_OR_BLOCK_KEYS,\n  VISITOR_KEYS,\n  isBlockStatement,\n  isExpression,\n  isIdentifier,\n  isLiteral,\n  isStringLiteral,\n  isType,\n  matchesPattern: _matchesPattern\n} = _t;\n\nfunction matchesPattern(pattern, allowPartial) {\n  return _matchesPattern(this.node, pattern, allowPartial);\n}\n\nfunction has(key) {\n  const val = this.node && this.node[key];\n\n  if (val && Array.isArray(val)) {\n    return !!val.length;\n  } else {\n    return !!val;\n  }\n}\n\nfunction isStatic() {\n  return this.scope.isStatic(this.node);\n}\n\nconst is = has;\nexports.is = is;\n\nfunction isnt(key) {\n  return !this.has(key);\n}\n\nfunction equals(key, value) {\n  return this.node[key] === value;\n}\n\nfunction isNodeType(type) {\n  return isType(this.type, type);\n}\n\nfunction canHaveVariableDeclarationOrExpression() {\n  return (this.key === \"init\" || this.key === \"left\") && this.parentPath.isFor();\n}\n\nfunction canSwapBetweenExpressionAndStatement(replacement) {\n  if (this.key !== \"body\" || !this.parentPath.isArrowFunctionExpression()) {\n    return false;\n  }\n\n  if (this.isExpression()) {\n    return isBlockStatement(replacement);\n  } else if (this.isBlockStatement()) {\n    return isExpression(replacement);\n  }\n\n  return false;\n}\n\nfunction isCompletionRecord(allowInsideFunction) {\n  let path = this;\n  let first = true;\n\n  do {\n    const {\n      type,\n      container\n    } = path;\n\n    if (!first && (path.isFunction() || type === \"StaticBlock\")) {\n      return !!allowInsideFunction;\n    }\n\n    first = false;\n\n    if (Array.isArray(container) && path.key !== container.length - 1) {\n      return false;\n    }\n  } while ((path = path.parentPath) && !path.isProgram() && !path.isDoExpression());\n\n  return true;\n}\n\nfunction isStatementOrBlock() {\n  if (this.parentPath.isLabeledStatement() || isBlockStatement(this.container)) {\n    return false;\n  } else {\n    return STATEMENT_OR_BLOCK_KEYS.includes(this.key);\n  }\n}\n\nfunction referencesImport(moduleSource, importName) {\n  if (!this.isReferencedIdentifier()) {\n    if (this.isJSXMemberExpression() && this.node.property.name === importName || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, {\n      value: importName\n    }) : this.node.property.name === importName)) {\n      const object = this.get(\"object\");\n      return object.isReferencedIdentifier() && object.referencesImport(moduleSource, \"*\");\n    }\n\n    return false;\n  }\n\n  const binding = this.scope.getBinding(this.node.name);\n  if (!binding || binding.kind !== \"module\") return false;\n  const path = binding.path;\n  const parent = path.parentPath;\n  if (!parent.isImportDeclaration()) return false;\n\n  if (parent.node.source.value === moduleSource) {\n    if (!importName) return true;\n  } else {\n    return false;\n  }\n\n  if (path.isImportDefaultSpecifier() && importName === \"default\") {\n    return true;\n  }\n\n  if (path.isImportNamespaceSpecifier() && importName === \"*\") {\n    return true;\n  }\n\n  if (path.isImportSpecifier() && isIdentifier(path.node.imported, {\n    name: importName\n  })) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getSource() {\n  const node = this.node;\n\n  if (node.end) {\n    const code = this.hub.getCode();\n    if (code) return code.slice(node.start, node.end);\n  }\n\n  return \"\";\n}\n\nfunction willIMaybeExecuteBefore(target) {\n  return this._guessExecutionStatusRelativeTo(target) !== \"after\";\n}\n\nfunction getOuterFunction(path) {\n  return (path.scope.getFunctionParent() || path.scope.getProgramParent()).path;\n}\n\nfunction isExecutionUncertain(type, key) {\n  switch (type) {\n    case \"LogicalExpression\":\n      return key === \"right\";\n\n    case \"ConditionalExpression\":\n    case \"IfStatement\":\n      return key === \"consequent\" || key === \"alternate\";\n\n    case \"WhileStatement\":\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForOfStatement\":\n      return key === \"body\";\n\n    case \"ForStatement\":\n      return key === \"body\" || key === \"update\";\n\n    case \"SwitchStatement\":\n      return key === \"cases\";\n\n    case \"TryStatement\":\n      return key === \"handler\";\n\n    case \"AssignmentPattern\":\n      return key === \"right\";\n\n    case \"OptionalMemberExpression\":\n      return key === \"property\";\n\n    case \"OptionalCallExpression\":\n      return key === \"arguments\";\n\n    default:\n      return false;\n  }\n}\n\nfunction isExecutionUncertainInList(paths, maxIndex) {\n  for (let i = 0; i < maxIndex; i++) {\n    const path = paths[i];\n\n    if (isExecutionUncertain(path.parent.type, path.parentKey)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction _guessExecutionStatusRelativeTo(target) {\n  return _guessExecutionStatusRelativeToCached(this, target, new Map());\n}\n\nfunction _guessExecutionStatusRelativeToCached(base, target, cache) {\n  const funcParent = {\n    this: getOuterFunction(base),\n    target: getOuterFunction(target)\n  };\n\n  if (funcParent.target.node !== funcParent.this.node) {\n    return _guessExecutionStatusRelativeToDifferentFunctionsCached(base, funcParent.target, cache);\n  }\n\n  const paths = {\n    target: target.getAncestry(),\n    this: base.getAncestry()\n  };\n  if (paths.target.indexOf(base) >= 0) return \"after\";\n  if (paths.this.indexOf(target) >= 0) return \"before\";\n  let commonPath;\n  const commonIndex = {\n    target: 0,\n    this: 0\n  };\n\n  while (!commonPath && commonIndex.this < paths.this.length) {\n    const path = paths.this[commonIndex.this];\n    commonIndex.target = paths.target.indexOf(path);\n\n    if (commonIndex.target >= 0) {\n      commonPath = path;\n    } else {\n      commonIndex.this++;\n    }\n  }\n\n  if (!commonPath) {\n    throw new Error(\"Internal Babel error - The two compared nodes\" + \" don't appear to belong to the same program.\");\n  }\n\n  if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1)) {\n    return \"unknown\";\n  }\n\n  const divergence = {\n    this: paths.this[commonIndex.this - 1],\n    target: paths.target[commonIndex.target - 1]\n  };\n\n  if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container) {\n    return divergence.target.key > divergence.this.key ? \"before\" : \"after\";\n  }\n\n  const keys = VISITOR_KEYS[commonPath.type];\n  const keyPosition = {\n    this: keys.indexOf(divergence.this.parentKey),\n    target: keys.indexOf(divergence.target.parentKey)\n  };\n  return keyPosition.target > keyPosition.this ? \"before\" : \"after\";\n}\n\nconst executionOrderCheckedNodes = new Set();\n\nfunction _guessExecutionStatusRelativeToDifferentFunctionsInternal(base, target, cache) {\n  if (!target.isFunctionDeclaration() || target.parentPath.isExportDeclaration()) {\n    return \"unknown\";\n  }\n\n  const binding = target.scope.getBinding(target.node.id.name);\n  if (!binding.references) return \"before\";\n  const referencePaths = binding.referencePaths;\n  let allStatus;\n\n  for (const path of referencePaths) {\n    const childOfFunction = !!path.find(path => path.node === target.node);\n    if (childOfFunction) continue;\n\n    if (path.key !== \"callee\" || !path.parentPath.isCallExpression()) {\n      return \"unknown\";\n    }\n\n    if (executionOrderCheckedNodes.has(path.node)) continue;\n    executionOrderCheckedNodes.add(path.node);\n\n    try {\n      const status = _guessExecutionStatusRelativeToCached(base, path, cache);\n\n      if (allStatus && allStatus !== status) {\n        return \"unknown\";\n      } else {\n        allStatus = status;\n      }\n    } finally {\n      executionOrderCheckedNodes.delete(path.node);\n    }\n  }\n\n  return allStatus;\n}\n\nfunction _guessExecutionStatusRelativeToDifferentFunctionsCached(base, target, cache) {\n  let nodeMap = cache.get(base.node);\n\n  if (!nodeMap) {\n    cache.set(base.node, nodeMap = new Map());\n  } else if (nodeMap.has(target.node)) {\n    return nodeMap.get(target.node);\n  }\n\n  const result = _guessExecutionStatusRelativeToDifferentFunctionsInternal(base, target, cache);\n\n  nodeMap.set(target.node, result);\n  return result;\n}\n\nfunction resolve(dangerous, resolved) {\n  return this._resolve(dangerous, resolved) || this;\n}\n\nfunction _resolve(dangerous, resolved) {\n  if (resolved && resolved.indexOf(this) >= 0) return;\n  resolved = resolved || [];\n  resolved.push(this);\n\n  if (this.isVariableDeclarator()) {\n    if (this.get(\"id\").isIdentifier()) {\n      return this.get(\"init\").resolve(dangerous, resolved);\n    } else {}\n  } else if (this.isReferencedIdentifier()) {\n    const binding = this.scope.getBinding(this.node.name);\n    if (!binding) return;\n    if (!binding.constant) return;\n    if (binding.kind === \"module\") return;\n\n    if (binding.path !== this) {\n      const ret = binding.path.resolve(dangerous, resolved);\n      if (this.find(parent => parent.node === ret.node)) return;\n      return ret;\n    }\n  } else if (this.isTypeCastExpression()) {\n    return this.get(\"expression\").resolve(dangerous, resolved);\n  } else if (dangerous && this.isMemberExpression()) {\n    const targetKey = this.toComputedKey();\n    if (!isLiteral(targetKey)) return;\n    const targetName = targetKey.value;\n    const target = this.get(\"object\").resolve(dangerous, resolved);\n\n    if (target.isObjectExpression()) {\n      const props = target.get(\"properties\");\n\n      for (const prop of props) {\n        if (!prop.isProperty()) continue;\n        const key = prop.get(\"key\");\n        let match = prop.isnt(\"computed\") && key.isIdentifier({\n          name: targetName\n        });\n        match = match || key.isLiteral({\n          value: targetName\n        });\n        if (match) return prop.get(\"value\").resolve(dangerous, resolved);\n      }\n    } else if (target.isArrayExpression() && !isNaN(+targetName)) {\n      const elems = target.get(\"elements\");\n      const elem = elems[targetName];\n      if (elem) return elem.resolve(dangerous, resolved);\n    }\n  }\n}\n\nfunction isConstantExpression() {\n  if (this.isIdentifier()) {\n    const binding = this.scope.getBinding(this.node.name);\n    if (!binding) return false;\n    return binding.constant;\n  }\n\n  if (this.isLiteral()) {\n    if (this.isRegExpLiteral()) {\n      return false;\n    }\n\n    if (this.isTemplateLiteral()) {\n      return this.get(\"expressions\").every(expression => expression.isConstantExpression());\n    }\n\n    return true;\n  }\n\n  if (this.isUnaryExpression()) {\n    if (this.node.operator !== \"void\") {\n      return false;\n    }\n\n    return this.get(\"argument\").isConstantExpression();\n  }\n\n  if (this.isBinaryExpression()) {\n    return this.get(\"left\").isConstantExpression() && this.get(\"right\").isConstantExpression();\n  }\n\n  return false;\n}\n\nfunction isInStrictMode() {\n  const start = this.isProgram() ? this : this.parentPath;\n  const strictParent = start.find(path => {\n    if (path.isProgram({\n      sourceType: \"module\"\n    })) return true;\n    if (path.isClass()) return true;\n    if (!path.isProgram() && !path.isFunction()) return false;\n\n    if (path.isArrowFunctionExpression() && !path.get(\"body\").isBlockStatement()) {\n      return false;\n    }\n\n    const body = path.isFunction() ? path.node.body : path.node;\n\n    for (const directive of body.directives) {\n      if (directive.value.value === \"use strict\") {\n        return true;\n      }\n    }\n  });\n  return !!strictParent;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}