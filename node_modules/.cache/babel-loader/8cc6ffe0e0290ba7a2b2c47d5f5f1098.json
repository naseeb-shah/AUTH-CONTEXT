{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = literalTemplate;\n\nvar _options = require(\"./options\");\n\nvar _parse = require(\"./parse\");\n\nvar _populate = require(\"./populate\");\n\nfunction literalTemplate(formatter, tpl, opts) {\n  const {\n    metadata,\n    names\n  } = buildLiteralData(formatter, tpl, opts);\n  return arg => {\n    const defaultReplacements = {};\n    arg.forEach((replacement, i) => {\n      defaultReplacements[names[i]] = replacement;\n    });\n    return arg => {\n      const replacements = (0, _options.normalizeReplacements)(arg);\n\n      if (replacements) {\n        Object.keys(replacements).forEach(key => {\n          if (Object.prototype.hasOwnProperty.call(defaultReplacements, key)) {\n            throw new Error(\"Unexpected replacement overlap.\");\n          }\n        });\n      }\n\n      return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));\n    };\n  };\n}\n\nfunction buildLiteralData(formatter, tpl, opts) {\n  let names;\n  let nameSet;\n  let metadata;\n  let prefix = \"\";\n\n  do {\n    prefix += \"$\";\n    const result = buildTemplateCode(tpl, prefix);\n    names = result.names;\n    nameSet = new Set(names);\n    metadata = (0, _parse.default)(formatter, formatter.code(result.code), {\n      parser: opts.parser,\n      placeholderWhitelist: new Set(result.names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),\n      placeholderPattern: opts.placeholderPattern,\n      preserveComments: opts.preserveComments,\n      syntacticPlaceholders: opts.syntacticPlaceholders\n    });\n  } while (metadata.placeholders.some(placeholder => placeholder.isDuplicate && nameSet.has(placeholder.name)));\n\n  return {\n    metadata,\n    names\n  };\n}\n\nfunction buildTemplateCode(tpl, prefix) {\n  const names = [];\n  let code = tpl[0];\n\n  for (let i = 1; i < tpl.length; i++) {\n    const value = `${prefix}${i - 1}`;\n    names.push(value);\n    code += value + tpl[i];\n  }\n\n  return {\n    names,\n    code\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","literalTemplate","_options","require","_parse","_populate","formatter","tpl","opts","metadata","names","buildLiteralData","arg","defaultReplacements","forEach","replacement","i","replacements","normalizeReplacements","keys","key","prototype","hasOwnProperty","call","Error","unwrap","assign","nameSet","prefix","result","buildTemplateCode","Set","code","parser","placeholderWhitelist","concat","Array","from","placeholderPattern","preserveComments","syntacticPlaceholders","placeholders","some","placeholder","isDuplicate","has","name","length","push"],"sources":["C:/Users/arrow/Desktop/Software Topics/React.js/ui/node_modules/@babel/template/lib/literal.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = literalTemplate;\n\nvar _options = require(\"./options\");\n\nvar _parse = require(\"./parse\");\n\nvar _populate = require(\"./populate\");\n\nfunction literalTemplate(formatter, tpl, opts) {\n  const {\n    metadata,\n    names\n  } = buildLiteralData(formatter, tpl, opts);\n  return arg => {\n    const defaultReplacements = {};\n    arg.forEach((replacement, i) => {\n      defaultReplacements[names[i]] = replacement;\n    });\n    return arg => {\n      const replacements = (0, _options.normalizeReplacements)(arg);\n\n      if (replacements) {\n        Object.keys(replacements).forEach(key => {\n          if (Object.prototype.hasOwnProperty.call(defaultReplacements, key)) {\n            throw new Error(\"Unexpected replacement overlap.\");\n          }\n        });\n      }\n\n      return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));\n    };\n  };\n}\n\nfunction buildLiteralData(formatter, tpl, opts) {\n  let names;\n  let nameSet;\n  let metadata;\n  let prefix = \"\";\n\n  do {\n    prefix += \"$\";\n    const result = buildTemplateCode(tpl, prefix);\n    names = result.names;\n    nameSet = new Set(names);\n    metadata = (0, _parse.default)(formatter, formatter.code(result.code), {\n      parser: opts.parser,\n      placeholderWhitelist: new Set(result.names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),\n      placeholderPattern: opts.placeholderPattern,\n      preserveComments: opts.preserveComments,\n      syntacticPlaceholders: opts.syntacticPlaceholders\n    });\n  } while (metadata.placeholders.some(placeholder => placeholder.isDuplicate && nameSet.has(placeholder.name)));\n\n  return {\n    metadata,\n    names\n  };\n}\n\nfunction buildTemplateCode(tpl, prefix) {\n  const names = [];\n  let code = tpl[0];\n\n  for (let i = 1; i < tpl.length; i++) {\n    const value = `${prefix}${i - 1}`;\n    names.push(value);\n    code += value + tpl[i];\n  }\n\n  return {\n    names,\n    code\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}