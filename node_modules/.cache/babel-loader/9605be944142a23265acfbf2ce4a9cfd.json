{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Var = exports.User = exports.Statement = exports.SpreadProperty = exports.Scope = exports.RestProperty = exports.ReferencedMemberExpression = exports.ReferencedIdentifier = exports.Referenced = exports.Pure = exports.NumericLiteralTypeAnnotation = exports.Generated = exports.ForAwaitStatement = exports.Flow = exports.Expression = exports.ExistentialTypeParam = exports.BlockScoped = exports.BindingIdentifier = void 0;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  isBinding,\n  isBlockScoped,\n  isExportDeclaration,\n  isExpression,\n  isFlow,\n  isForStatement,\n  isForXStatement,\n  isIdentifier,\n  isImportDeclaration,\n  isImportSpecifier,\n  isJSXIdentifier,\n  isJSXMemberExpression,\n  isMemberExpression,\n  isReferenced,\n  isScope,\n  isStatement,\n  isVar,\n  isVariableDeclaration,\n  react\n} = _t;\nconst {\n  isCompatTag\n} = react;\nconst ReferencedIdentifier = {\n  types: [\"Identifier\", \"JSXIdentifier\"],\n\n  checkPath(path, opts) {\n    const {\n      node,\n      parent\n    } = path;\n\n    if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {\n      if (isJSXIdentifier(node, opts)) {\n        if (isCompatTag(node.name)) return false;\n      } else {\n        return false;\n      }\n    }\n\n    return isReferenced(node, parent, path.parentPath.parent);\n  }\n\n};\nexports.ReferencedIdentifier = ReferencedIdentifier;\nconst ReferencedMemberExpression = {\n  types: [\"MemberExpression\"],\n\n  checkPath(_ref) {\n    let {\n      node,\n      parent\n    } = _ref;\n    return isMemberExpression(node) && isReferenced(node, parent);\n  }\n\n};\nexports.ReferencedMemberExpression = ReferencedMemberExpression;\nconst BindingIdentifier = {\n  types: [\"Identifier\"],\n\n  checkPath(path) {\n    const {\n      node,\n      parent\n    } = path;\n    const grandparent = path.parentPath.parent;\n    return isIdentifier(node) && isBinding(node, parent, grandparent);\n  }\n\n};\nexports.BindingIdentifier = BindingIdentifier;\nconst Statement = {\n  types: [\"Statement\"],\n\n  checkPath(_ref2) {\n    let {\n      node,\n      parent\n    } = _ref2;\n\n    if (isStatement(node)) {\n      if (isVariableDeclaration(node)) {\n        if (isForXStatement(parent, {\n          left: node\n        })) return false;\n        if (isForStatement(parent, {\n          init: node\n        })) return false;\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n};\nexports.Statement = Statement;\nconst Expression = {\n  types: [\"Expression\"],\n\n  checkPath(path) {\n    if (path.isIdentifier()) {\n      return path.isReferencedIdentifier();\n    } else {\n      return isExpression(path.node);\n    }\n  }\n\n};\nexports.Expression = Expression;\nconst Scope = {\n  types: [\"Scopable\", \"Pattern\"],\n\n  checkPath(path) {\n    return isScope(path.node, path.parent);\n  }\n\n};\nexports.Scope = Scope;\nconst Referenced = {\n  checkPath(path) {\n    return isReferenced(path.node, path.parent);\n  }\n\n};\nexports.Referenced = Referenced;\nconst BlockScoped = {\n  checkPath(path) {\n    return isBlockScoped(path.node);\n  }\n\n};\nexports.BlockScoped = BlockScoped;\nconst Var = {\n  types: [\"VariableDeclaration\"],\n\n  checkPath(path) {\n    return isVar(path.node);\n  }\n\n};\nexports.Var = Var;\nconst User = {\n  checkPath(path) {\n    return path.node && !!path.node.loc;\n  }\n\n};\nexports.User = User;\nconst Generated = {\n  checkPath(path) {\n    return !path.isUser();\n  }\n\n};\nexports.Generated = Generated;\nconst Pure = {\n  checkPath(path, constantsOnly) {\n    return path.scope.isPure(path.node, constantsOnly);\n  }\n\n};\nexports.Pure = Pure;\nconst Flow = {\n  types: [\"Flow\", \"ImportDeclaration\", \"ExportDeclaration\", \"ImportSpecifier\"],\n\n  checkPath(_ref3) {\n    let {\n      node\n    } = _ref3;\n\n    if (isFlow(node)) {\n      return true;\n    } else if (isImportDeclaration(node)) {\n      return node.importKind === \"type\" || node.importKind === \"typeof\";\n    } else if (isExportDeclaration(node)) {\n      return node.exportKind === \"type\";\n    } else if (isImportSpecifier(node)) {\n      return node.importKind === \"type\" || node.importKind === \"typeof\";\n    } else {\n      return false;\n    }\n  }\n\n};\nexports.Flow = Flow;\nconst RestProperty = {\n  types: [\"RestElement\"],\n\n  checkPath(path) {\n    return path.parentPath && path.parentPath.isObjectPattern();\n  }\n\n};\nexports.RestProperty = RestProperty;\nconst SpreadProperty = {\n  types: [\"RestElement\"],\n\n  checkPath(path) {\n    return path.parentPath && path.parentPath.isObjectExpression();\n  }\n\n};\nexports.SpreadProperty = SpreadProperty;\nconst ExistentialTypeParam = {\n  types: [\"ExistsTypeAnnotation\"]\n};\nexports.ExistentialTypeParam = ExistentialTypeParam;\nconst NumericLiteralTypeAnnotation = {\n  types: [\"NumberLiteralTypeAnnotation\"]\n};\nexports.NumericLiteralTypeAnnotation = NumericLiteralTypeAnnotation;\nconst ForAwaitStatement = {\n  types: [\"ForOfStatement\"],\n\n  checkPath(_ref4) {\n    let {\n      node\n    } = _ref4;\n    return node.await === true;\n  }\n\n};\nexports.ForAwaitStatement = ForAwaitStatement;","map":{"version":3,"names":["Object","defineProperty","exports","value","Var","User","Statement","SpreadProperty","Scope","RestProperty","ReferencedMemberExpression","ReferencedIdentifier","Referenced","Pure","NumericLiteralTypeAnnotation","Generated","ForAwaitStatement","Flow","Expression","ExistentialTypeParam","BlockScoped","BindingIdentifier","_t","require","isBinding","isBlockScoped","isExportDeclaration","isExpression","isFlow","isForStatement","isForXStatement","isIdentifier","isImportDeclaration","isImportSpecifier","isJSXIdentifier","isJSXMemberExpression","isMemberExpression","isReferenced","isScope","isStatement","isVar","isVariableDeclaration","react","isCompatTag","types","checkPath","path","opts","node","parent","name","parentPath","grandparent","left","init","isReferencedIdentifier","loc","isUser","constantsOnly","scope","isPure","importKind","exportKind","isObjectPattern","isObjectExpression","await"],"sources":["C:/Users/arrow/Desktop/Software Topics/React.js/ui/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Var = exports.User = exports.Statement = exports.SpreadProperty = exports.Scope = exports.RestProperty = exports.ReferencedMemberExpression = exports.ReferencedIdentifier = exports.Referenced = exports.Pure = exports.NumericLiteralTypeAnnotation = exports.Generated = exports.ForAwaitStatement = exports.Flow = exports.Expression = exports.ExistentialTypeParam = exports.BlockScoped = exports.BindingIdentifier = void 0;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  isBinding,\n  isBlockScoped,\n  isExportDeclaration,\n  isExpression,\n  isFlow,\n  isForStatement,\n  isForXStatement,\n  isIdentifier,\n  isImportDeclaration,\n  isImportSpecifier,\n  isJSXIdentifier,\n  isJSXMemberExpression,\n  isMemberExpression,\n  isReferenced,\n  isScope,\n  isStatement,\n  isVar,\n  isVariableDeclaration,\n  react\n} = _t;\nconst {\n  isCompatTag\n} = react;\nconst ReferencedIdentifier = {\n  types: [\"Identifier\", \"JSXIdentifier\"],\n\n  checkPath(path, opts) {\n    const {\n      node,\n      parent\n    } = path;\n\n    if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {\n      if (isJSXIdentifier(node, opts)) {\n        if (isCompatTag(node.name)) return false;\n      } else {\n        return false;\n      }\n    }\n\n    return isReferenced(node, parent, path.parentPath.parent);\n  }\n\n};\nexports.ReferencedIdentifier = ReferencedIdentifier;\nconst ReferencedMemberExpression = {\n  types: [\"MemberExpression\"],\n\n  checkPath({\n    node,\n    parent\n  }) {\n    return isMemberExpression(node) && isReferenced(node, parent);\n  }\n\n};\nexports.ReferencedMemberExpression = ReferencedMemberExpression;\nconst BindingIdentifier = {\n  types: [\"Identifier\"],\n\n  checkPath(path) {\n    const {\n      node,\n      parent\n    } = path;\n    const grandparent = path.parentPath.parent;\n    return isIdentifier(node) && isBinding(node, parent, grandparent);\n  }\n\n};\nexports.BindingIdentifier = BindingIdentifier;\nconst Statement = {\n  types: [\"Statement\"],\n\n  checkPath({\n    node,\n    parent\n  }) {\n    if (isStatement(node)) {\n      if (isVariableDeclaration(node)) {\n        if (isForXStatement(parent, {\n          left: node\n        })) return false;\n        if (isForStatement(parent, {\n          init: node\n        })) return false;\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n};\nexports.Statement = Statement;\nconst Expression = {\n  types: [\"Expression\"],\n\n  checkPath(path) {\n    if (path.isIdentifier()) {\n      return path.isReferencedIdentifier();\n    } else {\n      return isExpression(path.node);\n    }\n  }\n\n};\nexports.Expression = Expression;\nconst Scope = {\n  types: [\"Scopable\", \"Pattern\"],\n\n  checkPath(path) {\n    return isScope(path.node, path.parent);\n  }\n\n};\nexports.Scope = Scope;\nconst Referenced = {\n  checkPath(path) {\n    return isReferenced(path.node, path.parent);\n  }\n\n};\nexports.Referenced = Referenced;\nconst BlockScoped = {\n  checkPath(path) {\n    return isBlockScoped(path.node);\n  }\n\n};\nexports.BlockScoped = BlockScoped;\nconst Var = {\n  types: [\"VariableDeclaration\"],\n\n  checkPath(path) {\n    return isVar(path.node);\n  }\n\n};\nexports.Var = Var;\nconst User = {\n  checkPath(path) {\n    return path.node && !!path.node.loc;\n  }\n\n};\nexports.User = User;\nconst Generated = {\n  checkPath(path) {\n    return !path.isUser();\n  }\n\n};\nexports.Generated = Generated;\nconst Pure = {\n  checkPath(path, constantsOnly) {\n    return path.scope.isPure(path.node, constantsOnly);\n  }\n\n};\nexports.Pure = Pure;\nconst Flow = {\n  types: [\"Flow\", \"ImportDeclaration\", \"ExportDeclaration\", \"ImportSpecifier\"],\n\n  checkPath({\n    node\n  }) {\n    if (isFlow(node)) {\n      return true;\n    } else if (isImportDeclaration(node)) {\n      return node.importKind === \"type\" || node.importKind === \"typeof\";\n    } else if (isExportDeclaration(node)) {\n      return node.exportKind === \"type\";\n    } else if (isImportSpecifier(node)) {\n      return node.importKind === \"type\" || node.importKind === \"typeof\";\n    } else {\n      return false;\n    }\n  }\n\n};\nexports.Flow = Flow;\nconst RestProperty = {\n  types: [\"RestElement\"],\n\n  checkPath(path) {\n    return path.parentPath && path.parentPath.isObjectPattern();\n  }\n\n};\nexports.RestProperty = RestProperty;\nconst SpreadProperty = {\n  types: [\"RestElement\"],\n\n  checkPath(path) {\n    return path.parentPath && path.parentPath.isObjectExpression();\n  }\n\n};\nexports.SpreadProperty = SpreadProperty;\nconst ExistentialTypeParam = {\n  types: [\"ExistsTypeAnnotation\"]\n};\nexports.ExistentialTypeParam = ExistentialTypeParam;\nconst NumericLiteralTypeAnnotation = {\n  types: [\"NumberLiteralTypeAnnotation\"]\n};\nexports.NumericLiteralTypeAnnotation = NumericLiteralTypeAnnotation;\nconst ForAwaitStatement = {\n  types: [\"ForOfStatement\"],\n\n  checkPath({\n    node\n  }) {\n    return node.await === true;\n  }\n\n};\nexports.ForAwaitStatement = ForAwaitStatement;"],"mappings":"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"},"metadata":{},"sourceType":"script"}