{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._getTypeAnnotation = _getTypeAnnotation;\nexports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\nexports.couldBeBaseType = couldBeBaseType;\nexports.getTypeAnnotation = getTypeAnnotation;\nexports.isBaseType = isBaseType;\nexports.isGenericType = isGenericType;\n\nvar inferers = require(\"./inferers\");\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  anyTypeAnnotation,\n  isAnyTypeAnnotation,\n  isBooleanTypeAnnotation,\n  isEmptyTypeAnnotation,\n  isFlowBaseAnnotation,\n  isGenericTypeAnnotation,\n  isIdentifier,\n  isMixedTypeAnnotation,\n  isNumberTypeAnnotation,\n  isStringTypeAnnotation,\n  isTypeAnnotation,\n  isUnionTypeAnnotation,\n  isVoidTypeAnnotation,\n  stringTypeAnnotation,\n  voidTypeAnnotation\n} = _t;\n\nfunction getTypeAnnotation() {\n  let type = this.getData(\"typeAnnotation\");\n\n  if (type != null) {\n    return type;\n  }\n\n  type = this._getTypeAnnotation() || anyTypeAnnotation();\n  if (isTypeAnnotation(type)) type = type.typeAnnotation;\n  this.setData(\"typeAnnotation\", type);\n  return type;\n}\n\nconst typeAnnotationInferringNodes = new WeakSet();\n\nfunction _getTypeAnnotation() {\n  const node = this.node;\n\n  if (!node) {\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      const declar = this.parentPath.parentPath;\n      const declarParent = declar.parentPath;\n\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return stringTypeAnnotation();\n      }\n\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return anyTypeAnnotation();\n      }\n\n      return voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n\n  if (node.typeAnnotation) {\n    return node.typeAnnotation;\n  }\n\n  if (typeAnnotationInferringNodes.has(node)) {\n    return;\n  }\n\n  typeAnnotationInferringNodes.add(node);\n\n  try {\n    var _inferer;\n\n    let inferer = inferers[node.type];\n\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n\n    inferer = inferers[this.parentPath.type];\n\n    if ((_inferer = inferer) != null && _inferer.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  } finally {\n    typeAnnotationInferringNodes.delete(node);\n  }\n}\n\nfunction isBaseType(baseName, soft) {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\n\nfunction _isBaseType(baseName, type, soft) {\n  if (baseName === \"string\") {\n    return isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return isMixedTypeAnnotation(type);\n  } else if (baseName === \"empty\") {\n    return isEmptyTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(`Unknown base type ${baseName}`);\n    }\n  }\n}\n\nfunction couldBeBaseType(name) {\n  const type = this.getTypeAnnotation();\n  if (isAnyTypeAnnotation(type)) return true;\n\n  if (isUnionTypeAnnotation(type)) {\n    for (const type2 of type.types) {\n      if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\n\nfunction baseTypeStrictlyMatches(rightArg) {\n  const left = this.getTypeAnnotation();\n  const right = rightArg.getTypeAnnotation();\n\n  if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n\n  return false;\n}\n\nfunction isGenericType(genericName) {\n  const type = this.getTypeAnnotation();\n  return isGenericTypeAnnotation(type) && isIdentifier(type.id, {\n    name: genericName\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_getTypeAnnotation","baseTypeStrictlyMatches","couldBeBaseType","getTypeAnnotation","isBaseType","isGenericType","inferers","require","_t","anyTypeAnnotation","isAnyTypeAnnotation","isBooleanTypeAnnotation","isEmptyTypeAnnotation","isFlowBaseAnnotation","isGenericTypeAnnotation","isIdentifier","isMixedTypeAnnotation","isNumberTypeAnnotation","isStringTypeAnnotation","isTypeAnnotation","isUnionTypeAnnotation","isVoidTypeAnnotation","stringTypeAnnotation","voidTypeAnnotation","type","getData","typeAnnotation","setData","typeAnnotationInferringNodes","WeakSet","node","key","parentPath","isVariableDeclarator","declar","declarParent","isForInStatement","isForOfStatement","has","add","_inferer","inferer","call","validParent","delete","baseName","soft","_isBaseType","Error","name","type2","types","rightArg","left","right","genericName","id"],"sources":["C:/Users/arrow/Desktop/Software Topics/React.js/ui/node_modules/@babel/traverse/lib/path/inference/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._getTypeAnnotation = _getTypeAnnotation;\nexports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\nexports.couldBeBaseType = couldBeBaseType;\nexports.getTypeAnnotation = getTypeAnnotation;\nexports.isBaseType = isBaseType;\nexports.isGenericType = isGenericType;\n\nvar inferers = require(\"./inferers\");\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  anyTypeAnnotation,\n  isAnyTypeAnnotation,\n  isBooleanTypeAnnotation,\n  isEmptyTypeAnnotation,\n  isFlowBaseAnnotation,\n  isGenericTypeAnnotation,\n  isIdentifier,\n  isMixedTypeAnnotation,\n  isNumberTypeAnnotation,\n  isStringTypeAnnotation,\n  isTypeAnnotation,\n  isUnionTypeAnnotation,\n  isVoidTypeAnnotation,\n  stringTypeAnnotation,\n  voidTypeAnnotation\n} = _t;\n\nfunction getTypeAnnotation() {\n  let type = this.getData(\"typeAnnotation\");\n\n  if (type != null) {\n    return type;\n  }\n\n  type = this._getTypeAnnotation() || anyTypeAnnotation();\n  if (isTypeAnnotation(type)) type = type.typeAnnotation;\n  this.setData(\"typeAnnotation\", type);\n  return type;\n}\n\nconst typeAnnotationInferringNodes = new WeakSet();\n\nfunction _getTypeAnnotation() {\n  const node = this.node;\n\n  if (!node) {\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      const declar = this.parentPath.parentPath;\n      const declarParent = declar.parentPath;\n\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return stringTypeAnnotation();\n      }\n\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return anyTypeAnnotation();\n      }\n\n      return voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n\n  if (node.typeAnnotation) {\n    return node.typeAnnotation;\n  }\n\n  if (typeAnnotationInferringNodes.has(node)) {\n    return;\n  }\n\n  typeAnnotationInferringNodes.add(node);\n\n  try {\n    var _inferer;\n\n    let inferer = inferers[node.type];\n\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n\n    inferer = inferers[this.parentPath.type];\n\n    if ((_inferer = inferer) != null && _inferer.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  } finally {\n    typeAnnotationInferringNodes.delete(node);\n  }\n}\n\nfunction isBaseType(baseName, soft) {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\n\nfunction _isBaseType(baseName, type, soft) {\n  if (baseName === \"string\") {\n    return isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return isMixedTypeAnnotation(type);\n  } else if (baseName === \"empty\") {\n    return isEmptyTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(`Unknown base type ${baseName}`);\n    }\n  }\n}\n\nfunction couldBeBaseType(name) {\n  const type = this.getTypeAnnotation();\n  if (isAnyTypeAnnotation(type)) return true;\n\n  if (isUnionTypeAnnotation(type)) {\n    for (const type2 of type.types) {\n      if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\n\nfunction baseTypeStrictlyMatches(rightArg) {\n  const left = this.getTypeAnnotation();\n  const right = rightArg.getTypeAnnotation();\n\n  if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n\n  return false;\n}\n\nfunction isGenericType(genericName) {\n  const type = this.getTypeAnnotation();\n  return isGenericTypeAnnotation(type) && isIdentifier(type.id, {\n    name: genericName\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}