{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@jridgewell/set-array'), require('@jridgewell/sourcemap-codec'), require('@jridgewell/trace-mapping')) : typeof define === 'function' && define.amd ? define(['exports', '@jridgewell/set-array', '@jridgewell/sourcemap-codec', '@jridgewell/trace-mapping'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.genMapping = {}, global.setArray, global.sourcemapCodec, global.traceMapping));\n})(this, function (exports, setArray, sourcemapCodec, traceMapping) {\n  'use strict';\n\n  const COLUMN = 0;\n  const SOURCES_INDEX = 1;\n  const SOURCE_LINE = 2;\n  const SOURCE_COLUMN = 3;\n  const NAMES_INDEX = 4;\n  const NO_NAME = -1;\n  /**\n   * A low-level API to associate a generated position with an original source position. Line and\n   * column here are 0-based, unlike `addMapping`.\n   */\n\n  exports.addSegment = void 0;\n  /**\n   * A high-level API to associate a generated position with an original source position. Line is\n   * 1-based, but column is 0-based, due to legacy behavior in `source-map` library.\n   */\n\n  exports.addMapping = void 0;\n  /**\n   * Same as `addSegment`, but will only add the segment if it generates useful information in the\n   * resulting map. This only works correctly if segments are added **in order**, meaning you should\n   * not add a segment with a lower generated line/column than one that came before.\n   */\n\n  exports.maybeAddSegment = void 0;\n  /**\n   * Same as `addMapping`, but will only add the mapping if it generates useful information in the\n   * resulting map. This only works correctly if mappings are added **in order**, meaning you should\n   * not add a mapping with a lower generated line/column than one that came before.\n   */\n\n  exports.maybeAddMapping = void 0;\n  /**\n   * Adds/removes the content of the source file to the source map.\n   */\n\n  exports.setSourceContent = void 0;\n  /**\n   * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n   * a sourcemap, or to JSON.stringify.\n   */\n\n  exports.toDecodedMap = void 0;\n  /**\n   * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n   * a sourcemap, or to JSON.stringify.\n   */\n\n  exports.toEncodedMap = void 0;\n  /**\n   * Constructs a new GenMapping, using the already present mappings of the input.\n   */\n\n  exports.fromMap = void 0;\n  /**\n   * Returns an array of high-level mapping objects for every recorded segment, which could then be\n   * passed to the `source-map` library.\n   */\n\n  exports.allMappings = void 0; // This split declaration is only so that terser can elminiate the static initialization block.\n\n  let addSegmentInternal;\n  /**\n   * Provides the state to generate a sourcemap.\n   */\n\n  class GenMapping {\n    constructor() {\n      let {\n        file,\n        sourceRoot\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this._names = new setArray.SetArray();\n      this._sources = new setArray.SetArray();\n      this._sourcesContent = [];\n      this._mappings = [];\n      this.file = file;\n      this.sourceRoot = sourceRoot;\n    }\n\n  }\n\n  (() => {\n    exports.addSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {\n      return addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);\n    };\n\n    exports.maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {\n      return addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);\n    };\n\n    exports.addMapping = (map, mapping) => {\n      return addMappingInternal(false, map, mapping);\n    };\n\n    exports.maybeAddMapping = (map, mapping) => {\n      return addMappingInternal(true, map, mapping);\n    };\n\n    exports.setSourceContent = (map, source, content) => {\n      const {\n        _sources: sources,\n        _sourcesContent: sourcesContent\n      } = map;\n      sourcesContent[setArray.put(sources, source)] = content;\n    };\n\n    exports.toDecodedMap = map => {\n      const {\n        file,\n        sourceRoot,\n        _mappings: mappings,\n        _sources: sources,\n        _sourcesContent: sourcesContent,\n        _names: names\n      } = map;\n      removeEmptyFinalLines(mappings);\n      return {\n        version: 3,\n        file: file || undefined,\n        names: names.array,\n        sourceRoot: sourceRoot || undefined,\n        sources: sources.array,\n        sourcesContent,\n        mappings\n      };\n    };\n\n    exports.toEncodedMap = map => {\n      const decoded = exports.toDecodedMap(map);\n      return Object.assign(Object.assign({}, decoded), {\n        mappings: sourcemapCodec.encode(decoded.mappings)\n      });\n    };\n\n    exports.allMappings = map => {\n      const out = [];\n      const {\n        _mappings: mappings,\n        _sources: sources,\n        _names: names\n      } = map;\n\n      for (let i = 0; i < mappings.length; i++) {\n        const line = mappings[i];\n\n        for (let j = 0; j < line.length; j++) {\n          const seg = line[j];\n          const generated = {\n            line: i + 1,\n            column: seg[COLUMN]\n          };\n          let source = undefined;\n          let original = undefined;\n          let name = undefined;\n\n          if (seg.length !== 1) {\n            source = sources.array[seg[SOURCES_INDEX]];\n            original = {\n              line: seg[SOURCE_LINE] + 1,\n              column: seg[SOURCE_COLUMN]\n            };\n            if (seg.length === 5) name = names.array[seg[NAMES_INDEX]];\n          }\n\n          out.push({\n            generated,\n            source,\n            original,\n            name\n          });\n        }\n      }\n\n      return out;\n    };\n\n    exports.fromMap = input => {\n      const map = new traceMapping.TraceMap(input);\n      const gen = new GenMapping({\n        file: map.file,\n        sourceRoot: map.sourceRoot\n      });\n      putAll(gen._names, map.names);\n      putAll(gen._sources, map.sources);\n      gen._sourcesContent = map.sourcesContent || map.sources.map(() => null);\n      gen._mappings = traceMapping.decodedMappings(map);\n      return gen;\n    }; // Internal helpers\n\n\n    addSegmentInternal = (skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {\n      const {\n        _mappings: mappings,\n        _sources: sources,\n        _sourcesContent: sourcesContent,\n        _names: names\n      } = map;\n      const line = getLine(mappings, genLine);\n      const index = getColumnIndex(line, genColumn);\n\n      if (!source) {\n        if (skipable && skipSourceless(line, index)) return;\n        return insert(line, index, [genColumn]);\n      }\n\n      const sourcesIndex = setArray.put(sources, source);\n      const namesIndex = name ? setArray.put(names, name) : NO_NAME;\n      if (sourcesIndex === sourcesContent.length) sourcesContent[sourcesIndex] = content !== null && content !== void 0 ? content : null;\n\n      if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {\n        return;\n      }\n\n      return insert(line, index, name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]);\n    };\n  })();\n\n  function getLine(mappings, index) {\n    for (let i = mappings.length; i <= index; i++) {\n      mappings[i] = [];\n    }\n\n    return mappings[index];\n  }\n\n  function getColumnIndex(line, genColumn) {\n    let index = line.length;\n\n    for (let i = index - 1; i >= 0; index = i--) {\n      const current = line[i];\n      if (genColumn >= current[COLUMN]) break;\n    }\n\n    return index;\n  }\n\n  function insert(array, index, value) {\n    for (let i = array.length; i > index; i--) {\n      array[i] = array[i - 1];\n    }\n\n    array[index] = value;\n  }\n\n  function removeEmptyFinalLines(mappings) {\n    const {\n      length\n    } = mappings;\n    let len = length;\n\n    for (let i = len - 1; i >= 0; len = i, i--) {\n      if (mappings[i].length > 0) break;\n    }\n\n    if (len < length) mappings.length = len;\n  }\n\n  function putAll(strarr, array) {\n    for (let i = 0; i < array.length; i++) setArray.put(strarr, array[i]);\n  }\n\n  function skipSourceless(line, index) {\n    // The start of a line is already sourceless, so adding a sourceless segment to the beginning\n    // doesn't generate any useful information.\n    if (index === 0) return true;\n    const prev = line[index - 1]; // If the previous segment is also sourceless, then adding another sourceless segment doesn't\n    // genrate any new information. Else, this segment will end the source/named segment and point to\n    // a sourceless position, which is useful.\n\n    return prev.length === 1;\n  }\n\n  function skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {\n    // A source/named segment at the start of a line gives position at that genColumn\n    if (index === 0) return false;\n    const prev = line[index - 1]; // If the previous segment is sourceless, then we're transitioning to a source.\n\n    if (prev.length === 1) return false; // If the previous segment maps to the exact same source position, then this segment doesn't\n    // provide any new position information.\n\n    return sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME);\n  }\n\n  function addMappingInternal(skipable, map, mapping) {\n    const {\n      generated,\n      source,\n      original,\n      name,\n      content\n    } = mapping;\n\n    if (!source) {\n      return addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);\n    }\n\n    const s = source;\n    return addSegmentInternal(skipable, map, generated.line - 1, generated.column, s, original.line - 1, original.column, name, content);\n  }\n\n  exports.GenMapping = GenMapping;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"mappings":"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","names":["COLUMN","SOURCES_INDEX","SOURCE_LINE","SOURCE_COLUMN","NAMES_INDEX","NO_NAME","addSegment","addMapping","maybeAddSegment","maybeAddMapping","setSourceContent","toDecodedMap","toEncodedMap","fromMap","allMappings","addSegmentInternal","GenMapping","constructor","file","sourceRoot","SetArray","_sourcesContent","_mappings","map","genLine","genColumn","source","sourceLine","sourceColumn","name","content","mapping","addMappingInternal","_sources","sources","sourcesContent","put","mappings","_names","names","removeEmptyFinalLines","version","undefined","array","decoded","Object","encode","out","i","length","line","j","seg","generated","column","original","push","input","TraceMap","gen","putAll","decodedMappings","skipable","getLine","index","getColumnIndex","skipSourceless","insert","sourcesIndex","namesIndex","skipSource","current","value","len","strarr","prev","s"],"sources":["C:\\Users\\arrow\\Desktop\\Software Topics\\React.js\\ui\\node_modules\\@babel\\generator\\node_modules\\@jridgewell\\src\\sourcemap-segment.ts","C:\\Users\\arrow\\Desktop\\Software Topics\\React.js\\ui\\node_modules\\@babel\\generator\\node_modules\\@jridgewell\\src\\gen-mapping.ts"],"sourcesContent":["type GeneratedColumn = number;\ntype SourcesIndex = number;\ntype SourceLine = number;\ntype SourceColumn = number;\ntype NamesIndex = number;\n\nexport type SourceMapSegment =\n  | [GeneratedColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn, NamesIndex];\n\nexport const COLUMN = 0;\nexport const SOURCES_INDEX = 1;\nexport const SOURCE_LINE = 2;\nexport const SOURCE_COLUMN = 3;\nexport const NAMES_INDEX = 4;\n","import { SetArray, put } from '@jridgewell/set-array';\nimport { encode } from '@jridgewell/sourcemap-codec';\nimport { TraceMap, decodedMappings } from '@jridgewell/trace-mapping';\n\nimport {\n  COLUMN,\n  SOURCES_INDEX,\n  SOURCE_LINE,\n  SOURCE_COLUMN,\n  NAMES_INDEX,\n} from './sourcemap-segment';\n\nimport type { SourceMapInput } from '@jridgewell/trace-mapping';\nimport type { SourceMapSegment } from './sourcemap-segment';\nimport type { DecodedSourceMap, EncodedSourceMap, Pos, Mapping } from './types';\n\nexport type { DecodedSourceMap, EncodedSourceMap, Mapping };\n\nexport type Options = {\n  file?: string | null;\n  sourceRoot?: string | null;\n};\n\nconst NO_NAME = -1;\n\n/**\n * A low-level API to associate a generated position with an original source position. Line and\n * column here are 0-based, unlike `addMapping`.\n */\nexport let addSegment: {\n  (\n    map: GenMapping,\n    genLine: number,\n    genColumn: number,\n    source?: null,\n    sourceLine?: null,\n    sourceColumn?: null,\n    name?: null,\n    content?: null,\n  ): void;\n  (\n    map: GenMapping,\n    genLine: number,\n    genColumn: number,\n    source: string,\n    sourceLine: number,\n    sourceColumn: number,\n    name?: null,\n    content?: string | null,\n  ): void;\n  (\n    map: GenMapping,\n    genLine: number,\n    genColumn: number,\n    source: string,\n    sourceLine: number,\n    sourceColumn: number,\n    name: string,\n    content?: string | null,\n  ): void;\n};\n\n/**\n * A high-level API to associate a generated position with an original source position. Line is\n * 1-based, but column is 0-based, due to legacy behavior in `source-map` library.\n */\nexport let addMapping: {\n  (\n    map: GenMapping,\n    mapping: {\n      generated: Pos;\n      source?: null;\n      original?: null;\n      name?: null;\n      content?: null;\n    },\n  ): void;\n  (\n    map: GenMapping,\n    mapping: {\n      generated: Pos;\n      source: string;\n      original: Pos;\n      name?: null;\n      content?: string | null;\n    },\n  ): void;\n  (\n    map: GenMapping,\n    mapping: {\n      generated: Pos;\n      source: string;\n      original: Pos;\n      name: string;\n      content?: string | null;\n    },\n  ): void;\n};\n\n/**\n * Same as `addSegment`, but will only add the segment if it generates useful information in the\n * resulting map. This only works correctly if segments are added **in order**, meaning you should\n * not add a segment with a lower generated line/column than one that came before.\n */\nexport let maybeAddSegment: typeof addSegment;\n\n/**\n * Same as `addMapping`, but will only add the mapping if it generates useful information in the\n * resulting map. This only works correctly if mappings are added **in order**, meaning you should\n * not add a mapping with a lower generated line/column than one that came before.\n */\nexport let maybeAddMapping: typeof addMapping;\n\n/**\n * Adds/removes the content of the source file to the source map.\n */\nexport let setSourceContent: (map: GenMapping, source: string, content: string | null) => void;\n\n/**\n * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport let toDecodedMap: (map: GenMapping) => DecodedSourceMap;\n\n/**\n * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport let toEncodedMap: (map: GenMapping) => EncodedSourceMap;\n\n/**\n * Constructs a new GenMapping, using the already present mappings of the input.\n */\nexport let fromMap: (input: SourceMapInput) => GenMapping;\n\n/**\n * Returns an array of high-level mapping objects for every recorded segment, which could then be\n * passed to the `source-map` library.\n */\nexport let allMappings: (map: GenMapping) => Mapping[];\n\n// This split declaration is only so that terser can elminiate the static initialization block.\nlet addSegmentInternal: <S extends string | null | undefined>(\n  skipable: boolean,\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source: S,\n  sourceLine: S extends string ? number : null | undefined,\n  sourceColumn: S extends string ? number : null | undefined,\n  name: S extends string ? string | null | undefined : null | undefined,\n  content: S extends string ? string | null | undefined : null | undefined,\n) => void;\n\n/**\n * Provides the state to generate a sourcemap.\n */\nexport class GenMapping {\n  private _names = new SetArray();\n  private _sources = new SetArray();\n  private _sourcesContent: (string | null)[] = [];\n  private _mappings: SourceMapSegment[][] = [];\n  declare file: string | null | undefined;\n  declare sourceRoot: string | null | undefined;\n\n  constructor({ file, sourceRoot }: Options = {}) {\n    this.file = file;\n    this.sourceRoot = sourceRoot;\n  }\n\n  static {\n    addSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {\n      return addSegmentInternal(\n        false,\n        map,\n        genLine,\n        genColumn,\n        source,\n        sourceLine,\n        sourceColumn,\n        name,\n        content,\n      );\n    };\n\n    maybeAddSegment = (\n      map,\n      genLine,\n      genColumn,\n      source,\n      sourceLine,\n      sourceColumn,\n      name,\n      content,\n    ) => {\n      return addSegmentInternal(\n        true,\n        map,\n        genLine,\n        genColumn,\n        source,\n        sourceLine,\n        sourceColumn,\n        name,\n        content,\n      );\n    };\n\n    addMapping = (map, mapping) => {\n      return addMappingInternal(false, map, mapping as Parameters<typeof addMappingInternal>[2]);\n    };\n\n    maybeAddMapping = (map, mapping) => {\n      return addMappingInternal(true, map, mapping as Parameters<typeof addMappingInternal>[2]);\n    };\n\n    setSourceContent = (map, source, content) => {\n      const { _sources: sources, _sourcesContent: sourcesContent } = map;\n      sourcesContent[put(sources, source)] = content;\n    };\n\n    toDecodedMap = (map) => {\n      const {\n        file,\n        sourceRoot,\n        _mappings: mappings,\n        _sources: sources,\n        _sourcesContent: sourcesContent,\n        _names: names,\n      } = map;\n      removeEmptyFinalLines(mappings);\n\n      return {\n        version: 3,\n        file: file || undefined,\n        names: names.array,\n        sourceRoot: sourceRoot || undefined,\n        sources: sources.array,\n        sourcesContent,\n        mappings,\n      };\n    };\n\n    toEncodedMap = (map) => {\n      const decoded = toDecodedMap(map);\n      return {\n        ...decoded,\n        mappings: encode(decoded.mappings as SourceMapSegment[][]),\n      };\n    };\n\n    allMappings = (map) => {\n      const out: Mapping[] = [];\n      const { _mappings: mappings, _sources: sources, _names: names } = map;\n\n      for (let i = 0; i < mappings.length; i++) {\n        const line = mappings[i];\n        for (let j = 0; j < line.length; j++) {\n          const seg = line[j];\n\n          const generated = { line: i + 1, column: seg[COLUMN] };\n          let source: string | undefined = undefined;\n          let original: Pos | undefined = undefined;\n          let name: string | undefined = undefined;\n\n          if (seg.length !== 1) {\n            source = sources.array[seg[SOURCES_INDEX]];\n            original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] };\n\n            if (seg.length === 5) name = names.array[seg[NAMES_INDEX]];\n          }\n\n          out.push({ generated, source, original, name } as Mapping);\n        }\n      }\n\n      return out;\n    };\n\n    fromMap = (input) => {\n      const map = new TraceMap(input);\n      const gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });\n\n      putAll(gen._names, map.names);\n      putAll(gen._sources, map.sources as string[]);\n      gen._sourcesContent = map.sourcesContent || map.sources.map(() => null);\n      gen._mappings = decodedMappings(map) as GenMapping['_mappings'];\n\n      return gen;\n    };\n\n    // Internal helpers\n    addSegmentInternal = (\n      skipable,\n      map,\n      genLine,\n      genColumn,\n      source,\n      sourceLine,\n      sourceColumn,\n      name,\n      content,\n    ) => {\n      const {\n        _mappings: mappings,\n        _sources: sources,\n        _sourcesContent: sourcesContent,\n        _names: names,\n      } = map;\n      const line = getLine(mappings, genLine);\n      const index = getColumnIndex(line, genColumn);\n\n      if (!source) {\n        if (skipable && skipSourceless(line, index)) return;\n        return insert(line, index, [genColumn]);\n      }\n\n      // Sigh, TypeScript can't figure out sourceLine and sourceColumn aren't nullish if source\n      // isn't nullish.\n      assert<number>(sourceLine);\n      assert<number>(sourceColumn);\n\n      const sourcesIndex = put(sources, source);\n      const namesIndex = name ? put(names, name) : NO_NAME;\n      if (sourcesIndex === sourcesContent.length) sourcesContent[sourcesIndex] = content ?? null;\n\n      if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {\n        return;\n      }\n\n      return insert(\n        line,\n        index,\n        name\n          ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]\n          : [genColumn, sourcesIndex, sourceLine, sourceColumn],\n      );\n    };\n  }\n}\n\nfunction assert<T>(_val: unknown): asserts _val is T {\n  // noop.\n}\n\nfunction getLine(mappings: SourceMapSegment[][], index: number): SourceMapSegment[] {\n  for (let i = mappings.length; i <= index; i++) {\n    mappings[i] = [];\n  }\n  return mappings[index];\n}\n\nfunction getColumnIndex(line: SourceMapSegment[], genColumn: number): number {\n  let index = line.length;\n  for (let i = index - 1; i >= 0; index = i--) {\n    const current = line[i];\n    if (genColumn >= current[COLUMN]) break;\n  }\n  return index;\n}\n\nfunction insert<T>(array: T[], index: number, value: T) {\n  for (let i = array.length; i > index; i--) {\n    array[i] = array[i - 1];\n  }\n  array[index] = value;\n}\n\nfunction removeEmptyFinalLines(mappings: SourceMapSegment[][]) {\n  const { length } = mappings;\n  let len = length;\n  for (let i = len - 1; i >= 0; len = i, i--) {\n    if (mappings[i].length > 0) break;\n  }\n  if (len < length) mappings.length = len;\n}\n\nfunction putAll(strarr: SetArray, array: string[]) {\n  for (let i = 0; i < array.length; i++) put(strarr, array[i]);\n}\n\nfunction skipSourceless(line: SourceMapSegment[], index: number): boolean {\n  // The start of a line is already sourceless, so adding a sourceless segment to the beginning\n  // doesn't generate any useful information.\n  if (index === 0) return true;\n\n  const prev = line[index - 1];\n  // If the previous segment is also sourceless, then adding another sourceless segment doesn't\n  // genrate any new information. Else, this segment will end the source/named segment and point to\n  // a sourceless position, which is useful.\n  return prev.length === 1;\n}\n\nfunction skipSource(\n  line: SourceMapSegment[],\n  index: number,\n  sourcesIndex: number,\n  sourceLine: number,\n  sourceColumn: number,\n  namesIndex: number,\n): boolean {\n  // A source/named segment at the start of a line gives position at that genColumn\n  if (index === 0) return false;\n\n  const prev = line[index - 1];\n\n  // If the previous segment is sourceless, then we're transitioning to a source.\n  if (prev.length === 1) return false;\n\n  // If the previous segment maps to the exact same source position, then this segment doesn't\n  // provide any new position information.\n  return (\n    sourcesIndex === prev[SOURCES_INDEX] &&\n    sourceLine === prev[SOURCE_LINE] &&\n    sourceColumn === prev[SOURCE_COLUMN] &&\n    namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME)\n  );\n}\n\nfunction addMappingInternal<S extends string | null | undefined>(\n  skipable: boolean,\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source: S;\n    original: S extends string ? Pos : null | undefined;\n    name: S extends string ? string | null | undefined : null | undefined;\n    content: S extends string ? string | null | undefined : null | undefined;\n  },\n) {\n  const { generated, source, original, name, content } = mapping;\n  if (!source) {\n    return addSegmentInternal(\n      skipable,\n      map,\n      generated.line - 1,\n      generated.column,\n      null,\n      null,\n      null,\n      null,\n      null,\n    );\n  }\n  const s: string = source;\n  assert<Pos>(original);\n  return addSegmentInternal(\n    skipable,\n    map,\n    generated.line - 1,\n    generated.column,\n    s,\n    original.line - 1,\n    original.column,\n    name,\n    content,\n  );\n}\n"]},"metadata":{},"sourceType":"script"}