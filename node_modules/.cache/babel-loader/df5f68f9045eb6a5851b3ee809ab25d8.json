{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExportAllDeclaration = ExportAllDeclaration;\nexports.ExportDefaultDeclaration = ExportDefaultDeclaration;\nexports.ExportDefaultSpecifier = ExportDefaultSpecifier;\nexports.ExportNamedDeclaration = ExportNamedDeclaration;\nexports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;\nexports.ExportSpecifier = ExportSpecifier;\nexports.ImportAttribute = ImportAttribute;\nexports.ImportDeclaration = ImportDeclaration;\nexports.ImportDefaultSpecifier = ImportDefaultSpecifier;\nexports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\nexports.ImportSpecifier = ImportSpecifier;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  isClassDeclaration,\n  isExportDefaultSpecifier,\n  isExportNamespaceSpecifier,\n  isImportDefaultSpecifier,\n  isImportNamespaceSpecifier,\n  isStatement\n} = _t;\n\nfunction ImportSpecifier(node) {\n  if (node.importKind === \"type\" || node.importKind === \"typeof\") {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  this.print(node.imported, node);\n\n  if (node.local && node.local.name !== node.imported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.local, node);\n  }\n}\n\nfunction ImportDefaultSpecifier(node) {\n  this.print(node.local, node);\n}\n\nfunction ExportDefaultSpecifier(node) {\n  this.print(node.exported, node);\n}\n\nfunction ExportSpecifier(node) {\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n\n  this.print(node.local, node);\n\n  if (node.exported && node.local.name !== node.exported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.exported, node);\n  }\n}\n\nfunction ExportNamespaceSpecifier(node) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.exported, node);\n}\n\nfunction ExportAllDeclaration(node) {\n  this.word(\"export\");\n  this.space();\n\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n\n  this.token(\"*\");\n  this.space();\n  this.word(\"from\");\n  this.space();\n  this.print(node.source, node);\n  this.printAssertions(node);\n  this.semicolon();\n}\n\nfunction ExportNamedDeclaration(node) {\n  if (this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration)) {\n    this.printJoin(node.declaration.decorators, node);\n  }\n\n  this.word(\"export\");\n  this.space();\n  ExportDeclaration.apply(this, arguments);\n}\n\nfunction ExportDefaultDeclaration(node) {\n  if (this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration)) {\n    this.printJoin(node.declaration.decorators, node);\n  }\n\n  this.word(\"export\");\n  this.space();\n  this.word(\"default\");\n  this.space();\n  ExportDeclaration.apply(this, arguments);\n}\n\nfunction ExportDeclaration(node) {\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar, node);\n    if (!isStatement(declar)) this.semicolon();\n  } else {\n    if (node.exportKind === \"type\") {\n      this.word(\"type\");\n      this.space();\n    }\n\n    const specifiers = node.specifiers.slice(0);\n    let hasSpecial = false;\n\n    for (;;) {\n      const first = specifiers[0];\n\n      if (isExportDefaultSpecifier(first) || isExportNamespaceSpecifier(first)) {\n        hasSpecial = true;\n        this.print(specifiers.shift(), node);\n\n        if (specifiers.length) {\n          this.token(\",\");\n          this.space();\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (specifiers.length || !specifiers.length && !hasSpecial) {\n      this.token(\"{\");\n\n      if (specifiers.length) {\n        this.space();\n        this.printList(specifiers, node);\n        this.space();\n      }\n\n      this.token(\"}\");\n    }\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      this.print(node.source, node);\n      this.printAssertions(node);\n    }\n\n    this.semicolon();\n  }\n}\n\nfunction ImportDeclaration(node) {\n  this.word(\"import\");\n  this.space();\n  const isTypeKind = node.importKind === \"type\" || node.importKind === \"typeof\";\n\n  if (isTypeKind) {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  const specifiers = node.specifiers.slice(0);\n  const hasSpecifiers = !!specifiers.length;\n\n  while (hasSpecifiers) {\n    const first = specifiers[0];\n\n    if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) {\n      this.print(specifiers.shift(), node);\n\n      if (specifiers.length) {\n        this.token(\",\");\n        this.space();\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (specifiers.length) {\n    this.token(\"{\");\n    this.space();\n    this.printList(specifiers, node);\n    this.space();\n    this.token(\"}\");\n  } else if (isTypeKind && !hasSpecifiers) {\n    this.token(\"{\");\n    this.token(\"}\");\n  }\n\n  if (hasSpecifiers || isTypeKind) {\n    this.space();\n    this.word(\"from\");\n    this.space();\n  }\n\n  this.print(node.source, node);\n  this.printAssertions(node);\n  {\n    var _node$attributes;\n\n    if ((_node$attributes = node.attributes) != null && _node$attributes.length) {\n      this.space();\n      this.word(\"with\");\n      this.space();\n      this.printList(node.attributes, node);\n    }\n  }\n  this.semicolon();\n}\n\nfunction ImportAttribute(node) {\n  this.print(node.key);\n  this.token(\":\");\n  this.space();\n  this.print(node.value);\n}\n\nfunction ImportNamespaceSpecifier(node) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.local, node);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","ExportAllDeclaration","ExportDefaultDeclaration","ExportDefaultSpecifier","ExportNamedDeclaration","ExportNamespaceSpecifier","ExportSpecifier","ImportAttribute","ImportDeclaration","ImportDefaultSpecifier","ImportNamespaceSpecifier","ImportSpecifier","_t","require","isClassDeclaration","isExportDefaultSpecifier","isExportNamespaceSpecifier","isImportDefaultSpecifier","isImportNamespaceSpecifier","isStatement","node","importKind","word","space","print","imported","local","name","exported","exportKind","token","source","printAssertions","semicolon","format","decoratorsBeforeExport","declaration","printJoin","decorators","ExportDeclaration","apply","arguments","declar","specifiers","slice","hasSpecial","first","shift","length","printList","isTypeKind","hasSpecifiers","_node$attributes","attributes","key"],"sources":["C:/Users/arrow/Desktop/Software Topics/React.js/ui/node_modules/@babel/generator/lib/generators/modules.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExportAllDeclaration = ExportAllDeclaration;\nexports.ExportDefaultDeclaration = ExportDefaultDeclaration;\nexports.ExportDefaultSpecifier = ExportDefaultSpecifier;\nexports.ExportNamedDeclaration = ExportNamedDeclaration;\nexports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;\nexports.ExportSpecifier = ExportSpecifier;\nexports.ImportAttribute = ImportAttribute;\nexports.ImportDeclaration = ImportDeclaration;\nexports.ImportDefaultSpecifier = ImportDefaultSpecifier;\nexports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\nexports.ImportSpecifier = ImportSpecifier;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  isClassDeclaration,\n  isExportDefaultSpecifier,\n  isExportNamespaceSpecifier,\n  isImportDefaultSpecifier,\n  isImportNamespaceSpecifier,\n  isStatement\n} = _t;\n\nfunction ImportSpecifier(node) {\n  if (node.importKind === \"type\" || node.importKind === \"typeof\") {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  this.print(node.imported, node);\n\n  if (node.local && node.local.name !== node.imported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.local, node);\n  }\n}\n\nfunction ImportDefaultSpecifier(node) {\n  this.print(node.local, node);\n}\n\nfunction ExportDefaultSpecifier(node) {\n  this.print(node.exported, node);\n}\n\nfunction ExportSpecifier(node) {\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n\n  this.print(node.local, node);\n\n  if (node.exported && node.local.name !== node.exported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.exported, node);\n  }\n}\n\nfunction ExportNamespaceSpecifier(node) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.exported, node);\n}\n\nfunction ExportAllDeclaration(node) {\n  this.word(\"export\");\n  this.space();\n\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n\n  this.token(\"*\");\n  this.space();\n  this.word(\"from\");\n  this.space();\n  this.print(node.source, node);\n  this.printAssertions(node);\n  this.semicolon();\n}\n\nfunction ExportNamedDeclaration(node) {\n  if (this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration)) {\n    this.printJoin(node.declaration.decorators, node);\n  }\n\n  this.word(\"export\");\n  this.space();\n  ExportDeclaration.apply(this, arguments);\n}\n\nfunction ExportDefaultDeclaration(node) {\n  if (this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration)) {\n    this.printJoin(node.declaration.decorators, node);\n  }\n\n  this.word(\"export\");\n  this.space();\n  this.word(\"default\");\n  this.space();\n  ExportDeclaration.apply(this, arguments);\n}\n\nfunction ExportDeclaration(node) {\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar, node);\n    if (!isStatement(declar)) this.semicolon();\n  } else {\n    if (node.exportKind === \"type\") {\n      this.word(\"type\");\n      this.space();\n    }\n\n    const specifiers = node.specifiers.slice(0);\n    let hasSpecial = false;\n\n    for (;;) {\n      const first = specifiers[0];\n\n      if (isExportDefaultSpecifier(first) || isExportNamespaceSpecifier(first)) {\n        hasSpecial = true;\n        this.print(specifiers.shift(), node);\n\n        if (specifiers.length) {\n          this.token(\",\");\n          this.space();\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (specifiers.length || !specifiers.length && !hasSpecial) {\n      this.token(\"{\");\n\n      if (specifiers.length) {\n        this.space();\n        this.printList(specifiers, node);\n        this.space();\n      }\n\n      this.token(\"}\");\n    }\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      this.print(node.source, node);\n      this.printAssertions(node);\n    }\n\n    this.semicolon();\n  }\n}\n\nfunction ImportDeclaration(node) {\n  this.word(\"import\");\n  this.space();\n  const isTypeKind = node.importKind === \"type\" || node.importKind === \"typeof\";\n\n  if (isTypeKind) {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  const specifiers = node.specifiers.slice(0);\n  const hasSpecifiers = !!specifiers.length;\n\n  while (hasSpecifiers) {\n    const first = specifiers[0];\n\n    if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) {\n      this.print(specifiers.shift(), node);\n\n      if (specifiers.length) {\n        this.token(\",\");\n        this.space();\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (specifiers.length) {\n    this.token(\"{\");\n    this.space();\n    this.printList(specifiers, node);\n    this.space();\n    this.token(\"}\");\n  } else if (isTypeKind && !hasSpecifiers) {\n    this.token(\"{\");\n    this.token(\"}\");\n  }\n\n  if (hasSpecifiers || isTypeKind) {\n    this.space();\n    this.word(\"from\");\n    this.space();\n  }\n\n  this.print(node.source, node);\n  this.printAssertions(node);\n  {\n    var _node$attributes;\n\n    if ((_node$attributes = node.attributes) != null && _node$attributes.length) {\n      this.space();\n      this.word(\"with\");\n      this.space();\n      this.printList(node.attributes, node);\n    }\n  }\n  this.semicolon();\n}\n\nfunction ImportAttribute(node) {\n  this.print(node.key);\n  this.token(\":\");\n  this.space();\n  this.print(node.value);\n}\n\nfunction ImportNamespaceSpecifier(node) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.local, node);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}