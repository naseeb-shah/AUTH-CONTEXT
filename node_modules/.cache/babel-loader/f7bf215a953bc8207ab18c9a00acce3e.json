{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _binding = require(\"../binding\");\n\nvar _helperSplitExportDeclaration = require(\"@babel/helper-split-export-declaration\");\n\nvar _t = require(\"@babel/types\");\n\nvar _helperEnvironmentVisitor = require(\"@babel/helper-environment-visitor\");\n\nconst {\n  assignmentExpression,\n  identifier,\n  toExpression,\n  variableDeclaration,\n  variableDeclarator\n} = _t;\nconst renameVisitor = {\n  ReferencedIdentifier(_ref, state) {\n    let {\n      node\n    } = _ref;\n\n    if (node.name === state.oldName) {\n      node.name = state.newName;\n    }\n  },\n\n  Scope(path, state) {\n    if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {\n      path.skip();\n\n      if (path.isMethod()) {\n        (0, _helperEnvironmentVisitor.requeueComputedKeyAndDecorators)(path);\n      }\n    }\n  },\n\n  \"AssignmentExpression|Declaration|VariableDeclarator\"(path, state) {\n    if (path.isVariableDeclaration()) return;\n    const ids = path.getOuterBindingIdentifiers();\n\n    for (const name in ids) {\n      if (name === state.oldName) ids[name].name = state.newName;\n    }\n  }\n\n};\n\nclass Renamer {\n  constructor(binding, oldName, newName) {\n    this.newName = newName;\n    this.oldName = oldName;\n    this.binding = binding;\n  }\n\n  maybeConvertFromExportDeclaration(parentDeclar) {\n    const maybeExportDeclar = parentDeclar.parentPath;\n\n    if (!maybeExportDeclar.isExportDeclaration()) {\n      return;\n    }\n\n    if (maybeExportDeclar.isExportDefaultDeclaration() && !maybeExportDeclar.get(\"declaration\").node.id) {\n      return;\n    }\n\n    (0, _helperSplitExportDeclaration.default)(maybeExportDeclar);\n  }\n\n  maybeConvertFromClassFunctionDeclaration(path) {\n    return;\n    if (!path.isFunctionDeclaration() && !path.isClassDeclaration()) return;\n    if (this.binding.kind !== \"hoisted\") return;\n    path.node.id = identifier(this.oldName);\n    path.node._blockHoist = 3;\n    path.replaceWith(variableDeclaration(\"let\", [variableDeclarator(identifier(this.newName), toExpression(path.node))]));\n  }\n\n  maybeConvertFromClassFunctionExpression(path) {\n    return;\n    if (!path.isFunctionExpression() && !path.isClassExpression()) return;\n    if (this.binding.kind !== \"local\") return;\n    path.node.id = identifier(this.oldName);\n    this.binding.scope.parent.push({\n      id: identifier(this.newName)\n    });\n    path.replaceWith(assignmentExpression(\"=\", identifier(this.newName), path.node));\n  }\n\n  rename(block) {\n    const {\n      binding,\n      oldName,\n      newName\n    } = this;\n    const {\n      scope,\n      path\n    } = binding;\n    const parentDeclar = path.find(path => path.isDeclaration() || path.isFunctionExpression() || path.isClassExpression());\n\n    if (parentDeclar) {\n      const bindingIds = parentDeclar.getOuterBindingIdentifiers();\n\n      if (bindingIds[oldName] === binding.identifier) {\n        this.maybeConvertFromExportDeclaration(parentDeclar);\n      }\n    }\n\n    const blockToTraverse = block || scope.block;\n\n    if ((blockToTraverse == null ? void 0 : blockToTraverse.type) === \"SwitchStatement\") {\n      blockToTraverse.cases.forEach(c => {\n        scope.traverse(c, renameVisitor, this);\n      });\n    } else {\n      scope.traverse(blockToTraverse, renameVisitor, this);\n    }\n\n    if (!block) {\n      scope.removeOwnBinding(oldName);\n      scope.bindings[newName] = binding;\n      this.binding.identifier.name = newName;\n    }\n\n    if (parentDeclar) {\n      this.maybeConvertFromClassFunctionDeclaration(parentDeclar);\n      this.maybeConvertFromClassFunctionExpression(parentDeclar);\n    }\n  }\n\n}\n\nexports.default = Renamer;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_binding","require","_helperSplitExportDeclaration","_t","_helperEnvironmentVisitor","assignmentExpression","identifier","toExpression","variableDeclaration","variableDeclarator","renameVisitor","ReferencedIdentifier","state","node","name","oldName","newName","Scope","path","scope","bindingIdentifierEquals","binding","skip","isMethod","requeueComputedKeyAndDecorators","isVariableDeclaration","ids","getOuterBindingIdentifiers","Renamer","constructor","maybeConvertFromExportDeclaration","parentDeclar","maybeExportDeclar","parentPath","isExportDeclaration","isExportDefaultDeclaration","get","id","maybeConvertFromClassFunctionDeclaration","isFunctionDeclaration","isClassDeclaration","kind","_blockHoist","replaceWith","maybeConvertFromClassFunctionExpression","isFunctionExpression","isClassExpression","parent","push","rename","block","find","isDeclaration","bindingIds","blockToTraverse","type","cases","forEach","c","traverse","removeOwnBinding","bindings"],"sources":["C:/Users/arrow/Desktop/Software Topics/React.js/ui/node_modules/@babel/traverse/lib/scope/lib/renamer.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _binding = require(\"../binding\");\n\nvar _helperSplitExportDeclaration = require(\"@babel/helper-split-export-declaration\");\n\nvar _t = require(\"@babel/types\");\n\nvar _helperEnvironmentVisitor = require(\"@babel/helper-environment-visitor\");\n\nconst {\n  assignmentExpression,\n  identifier,\n  toExpression,\n  variableDeclaration,\n  variableDeclarator\n} = _t;\nconst renameVisitor = {\n  ReferencedIdentifier({\n    node\n  }, state) {\n    if (node.name === state.oldName) {\n      node.name = state.newName;\n    }\n  },\n\n  Scope(path, state) {\n    if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {\n      path.skip();\n\n      if (path.isMethod()) {\n        (0, _helperEnvironmentVisitor.requeueComputedKeyAndDecorators)(path);\n      }\n    }\n  },\n\n  \"AssignmentExpression|Declaration|VariableDeclarator\"(path, state) {\n    if (path.isVariableDeclaration()) return;\n    const ids = path.getOuterBindingIdentifiers();\n\n    for (const name in ids) {\n      if (name === state.oldName) ids[name].name = state.newName;\n    }\n  }\n\n};\n\nclass Renamer {\n  constructor(binding, oldName, newName) {\n    this.newName = newName;\n    this.oldName = oldName;\n    this.binding = binding;\n  }\n\n  maybeConvertFromExportDeclaration(parentDeclar) {\n    const maybeExportDeclar = parentDeclar.parentPath;\n\n    if (!maybeExportDeclar.isExportDeclaration()) {\n      return;\n    }\n\n    if (maybeExportDeclar.isExportDefaultDeclaration() && !maybeExportDeclar.get(\"declaration\").node.id) {\n      return;\n    }\n\n    (0, _helperSplitExportDeclaration.default)(maybeExportDeclar);\n  }\n\n  maybeConvertFromClassFunctionDeclaration(path) {\n    return;\n    if (!path.isFunctionDeclaration() && !path.isClassDeclaration()) return;\n    if (this.binding.kind !== \"hoisted\") return;\n    path.node.id = identifier(this.oldName);\n    path.node._blockHoist = 3;\n    path.replaceWith(variableDeclaration(\"let\", [variableDeclarator(identifier(this.newName), toExpression(path.node))]));\n  }\n\n  maybeConvertFromClassFunctionExpression(path) {\n    return;\n    if (!path.isFunctionExpression() && !path.isClassExpression()) return;\n    if (this.binding.kind !== \"local\") return;\n    path.node.id = identifier(this.oldName);\n    this.binding.scope.parent.push({\n      id: identifier(this.newName)\n    });\n    path.replaceWith(assignmentExpression(\"=\", identifier(this.newName), path.node));\n  }\n\n  rename(block) {\n    const {\n      binding,\n      oldName,\n      newName\n    } = this;\n    const {\n      scope,\n      path\n    } = binding;\n    const parentDeclar = path.find(path => path.isDeclaration() || path.isFunctionExpression() || path.isClassExpression());\n\n    if (parentDeclar) {\n      const bindingIds = parentDeclar.getOuterBindingIdentifiers();\n\n      if (bindingIds[oldName] === binding.identifier) {\n        this.maybeConvertFromExportDeclaration(parentDeclar);\n      }\n    }\n\n    const blockToTraverse = block || scope.block;\n\n    if ((blockToTraverse == null ? void 0 : blockToTraverse.type) === \"SwitchStatement\") {\n      blockToTraverse.cases.forEach(c => {\n        scope.traverse(c, renameVisitor, this);\n      });\n    } else {\n      scope.traverse(blockToTraverse, renameVisitor, this);\n    }\n\n    if (!block) {\n      scope.removeOwnBinding(oldName);\n      scope.bindings[newName] = binding;\n      this.binding.identifier.name = newName;\n    }\n\n    if (parentDeclar) {\n      this.maybeConvertFromClassFunctionDeclaration(parentDeclar);\n      this.maybeConvertFromClassFunctionExpression(parentDeclar);\n    }\n  }\n\n}\n\nexports.default = Renamer;"],"mappings":"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"},"metadata":{},"sourceType":"script"}